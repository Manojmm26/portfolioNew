{
  "concepts": [
    {
      "id": "flexbox",
      "technology": "css",
      "category": "layout",
      "title": "Flexbox Layout",
      "description": "Learn how to create flexible and responsive layouts using CSS Flexbox",
      "difficulty": "intermediate",
      "explanation": "Flexbox, or Flexible Box Layout, is a powerful one-dimensional layout model in CSS designed to distribute space among items in a container and handle alignment effectively. Unlike traditional block and inline layouts, Flexbox is particularly suited for application layouts and complex components. It operates along a single axis, either horizontally (row) or vertically (column), making it incredibly useful for designing responsive interfaces. The core idea revolves around the 'flex container' and 'flex items'.  When you declare `display: flex` or `display: inline-flex` on a container, its direct children become flex items.  These items then behave according to various flex properties.  The main axis is defined by `flex-direction` (row, row-reverse, column, column-reverse), and items are positioned and spaced along this axis using properties like `justify-content`. The cross axis, perpendicular to the main axis, is used for alignment with properties like `align-items` and `align-content`.  Flex items can grow or shrink to fill available space within the container, controlled by `flex-grow`, `flex-shrink`, and `flex-basis`. Understanding the interplay of these properties is key to mastering Flexbox and creating layouts that are both flexible and predictable.",
      "example": ".container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n\n.item {\n  flex: 1;\n  padding: 1rem;\n  background-color: #e0e0e0;\n}",
      "previewHtml": "<div class='container'>\n  <div class='item'>Item 1</div>\n  <div class='item'>Item 2</div>\n  <div class='item'>Item 3</div>\n</div>",
      "practice": [
        "Create a navigation bar with evenly spaced items using flexbox",
        "Build a card layout with flexible content areas",
        "Implement a centered content container with flex properties"
      ],
      "quiz": [
        {
          "question": "Which property makes a container a flex container?",
          "options": ["display: block", "display: flex", "display: grid", "display: inline"],
          "correctAnswer": 1
        },
        {
          "question": "What is the default value of flex-direction?",
          "options": ["column", "row", "row-reverse", "column-reverse"],
          "correctAnswer": 1
        },
        {
          "question": "Which property aligns flex items along the cross axis?",
          "options": ["justify-content", "align-items", "align-content", "flex-wrap"],
          "correctAnswer": 1
        },
        {
          "question": "What does `flex: 1` shorthand property represent?",
          "options": ["flex-grow: 1, flex-shrink: 1, flex-basis: 0%", "flex-grow: 1, flex-shrink: 0, flex-basis: auto", "flex-grow: 1, flex-shrink: 1, flex-basis: auto", "flex-grow: 0, flex-shrink: 1, flex-basis: 0%"],
          "correctAnswer": 0
        },
        {
          "question": "Which property controls whether flex items wrap onto multiple lines?",
          "options": ["flex-flow", "flex-wrap", "flex-direction", "align-items"],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".navbar {\n  display: flex;\n  justify-content: space-between;\n  padding: 1rem;\n  background-color: #f5f5f5;\n}\n\n.nav-item {\n  padding: 0.5rem 1rem;\n  color: #333;\n  text-decoration: none;\n  border-radius: 4px;\n}\n\n.nav-item:hover {\n  background-color: #e0e0e0;\n}",
          "result": "A responsive navigation bar with hover effects"
        },
        {
          "code": ".card-layout {\n  display: flex;\n  gap: 1.5rem;\n  flex-wrap: wrap;\n}\n\n.card {\n  flex: 1 0 300px; /* Grow, shrink, and initial basis */\n  padding: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n}",
          "result": "A flexible card layout that wraps on smaller screens"
        },
        {
          "code": ".center-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px; /* Example height */\n  background-color: #f9f9f9;\n}\n\n.centered-content {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n}",
          "result": "Content perfectly centered both horizontally and vertically within a container"
        }
      ],
      "keyPoints": [
        "Flexbox works in one dimension at a time (either rows or columns).",
        "The flex container controls the alignment and distribution of its items.",
        "Items can be reordered visually without altering the HTML source order using `order` property.",
        "Flex properties provide powerful alignment capabilities along both main and cross axes.",
        "`flex-grow`, `flex-shrink`, and `flex-basis` properties control how flex items resize to fit the container.",
        "Use `gap` property for easy spacing between flex items.",
        "Flexbox is ideal for navigation menus, toolbars, and component layouts."
      ]
    },
    {
      "id": "grid",
      "technology": "css",
      "category": "layout",
      "title": "CSS Grid Layout",
      "description": "Master CSS Grid for creating complex two-dimensional layouts",
      "difficulty": "intermediate",
      "explanation": "CSS Grid Layout is a revolutionary two-dimensional layout system for the web, offering unparalleled control over both columns and rows simultaneously. It's designed to solve complex layout challenges that were difficult or impossible with previous CSS methods. By dividing a container into a grid with rows and columns, you can precisely place and size elements within these grid cells.  To activate Grid Layout, set `display: grid` or `display: inline-grid` on a container, making it a 'grid container'. Its direct children become 'grid items'. You define the structure of the grid using `grid-template-columns` and `grid-template-rows`, specifying the number and size of columns and rows.  Units like `fr` (fractional unit) are particularly powerful, allowing you to distribute available space proportionally among tracks. You can also use fixed units like `px`, percentages, or `auto`.  Grid items are placed within the grid using properties like `grid-column-start`, `grid-column-end`, `grid-row-start`, and `grid-row-end`, or their shorthand forms `grid-column` and `grid-row`.  Named grid areas, defined using `grid-template-areas` and assigned to items with `grid-area`, further simplify complex layouts by allowing you to visualize and arrange layout regions directly in your CSS. Grid is ideal for page layouts, complex forms, and any scenario requiring precise two-dimensional control.",
      "example": ".grid-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 1rem;\n  padding: 1rem;\n}\n\n.grid-item {\n  padding: 2rem;\n  background-color: #e0e0e0;\n  text-align: center;\n}",
      "previewHtml": "<div class='grid-container'>\n  <div class='grid-item'>1</div>\n  <div class='grid-item'>2</div>\n  <div class='grid-item'>3</div>\n  <div class='grid-item'>4</div>\n  <div class='grid-item'>5</div>\n  <div class='grid-item'>6</div>\n</div>",
      "practice": [
        "Create a responsive image gallery using grid",
        "Build a dashboard layout with different sized sections",
        "Implement a responsive card grid with auto-fit"
      ],
      "quiz": [
        {
          "question": "What does 'fr' unit represent in Grid?",
          "options": ["Fixed ratio", "Fractional unit", "Free space", "Frame size"],
          "correctAnswer": 1
        },
        {
          "question": "Which property defines the size of grid columns?",
          "options": ["grid-template-rows", "grid-template-columns", "grid-auto-columns", "grid-column-gap"],
          "correctAnswer": 1
        },
        {
          "question": "How do you create gaps between grid rows and columns?",
          "options": ["row-gap and column-gap", "grid-row-gap and grid-column-gap", "grid-gap", "All of the above"],
          "correctAnswer": 3
        },
        {
          "question": "What property allows you to name grid areas for layout?",
          "options": ["grid-template-names", "grid-area-names", "grid-template-areas", "grid-named-layout"],
          "correctAnswer": 2
        },
        {
          "question": "What is the difference between explicit and implicit grid tracks?",
          "options": ["Explicit tracks are defined, implicit are automatically created for content.", "Implicit tracks are defined, explicit are automatically created for content.", "Explicit tracks are for rows, implicit are for columns.", "There is no difference."],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": ".gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 1rem;\n  padding: 1rem;\n}\n\n.gallery-item {\n  aspect-ratio: 1;\n  background-color: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}",
          "result": "A responsive image gallery layout"
        },
        {
          "code": ".dashboard {\n  display: grid;\n  grid-template-columns: 250px 1fr;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    'sidebar header'\n    'sidebar main'\n    'sidebar footer';\n  height: 100vh;\n}\n\n.dashboard-header { grid-area: header; background-color: #f5f5f5; padding: 1rem; }\n.dashboard-sidebar { grid-area: sidebar; background-color: #e0e0e0; padding: 1rem; }\n.dashboard-main { grid-area: main; padding: 1rem; }\n.dashboard-footer { grid-area: footer; background-color: #f5f5f5; padding: 1rem; text-align: center; }",
          "result": "A basic dashboard layout structure using Grid Areas"
        },
        {
          "code": ".card-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-auto-rows: minmax(150px, auto);\n  grid-gap: 1.5rem;\n  padding: 2rem;\n}\n\n.card-grid-item {\n  background-color: white;\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}",
          "result": "A responsive card grid layout with auto-fitting columns and rows"
        }
      ],
      "keyPoints": [
        "Grid works in two dimensions, controlling both rows and columns simultaneously.",
        "Supports both explicit grid tracks (defined by you) and implicit tracks (created for content).",
        "Provides powerful alignment and spacing controls using properties like `justify-items`, `align-items`, `justify-content`, `align-content`, and `gap`.",
        "Enables responsive layouts without relying solely on media queries, thanks to features like `auto-fit`, `auto-fill`, and `minmax()`.",
        "Grid items can span multiple rows and columns.",
        "Named grid areas offer a visual and semantic way to define layout structure.",
        "CSS Grid is ideal for complex page layouts, dashboards, and component grids."
      ]
    },
    {
      "id": "animations",
      "technology": "css",
      "category": "animation",
      "title": "CSS Animations",
      "description": "Create engaging animations using CSS keyframes and transitions",
      "difficulty": "intermediate",
      "explanation": "CSS Animations are a powerful way to bring web pages to life without relying on JavaScript for many common animation tasks. They allow you to smoothly change property values over time, creating dynamic visual effects. There are two primary mechanisms for CSS animations: **CSS Animations using `@keyframes`** and **CSS Transitions**.  `@keyframes` animations are more complex and allow for defining multiple keyframes throughout the animation sequence, giving you fine-grained control over each step of the animation. You define an animation name using `@keyframes animation-name { ... }` and then apply it to an element using the `animation` property. Keyframes are defined using percentages or keywords `from` (0%) and `to` (100%) to specify the styles at different points in the animation timeline.  **CSS Transitions**, on the other hand, are simpler and designed for animating changes between two states. They are typically triggered by pseudo-classes like `:hover` or `:focus`, or by JavaScript changes to element styles. You define which properties should be transitioned and the transition duration, timing function, and delay using the `transition` property.  Both animations and transitions are hardware-accelerated by browsers, making them performant and efficient for creating engaging user interfaces and micro-interactions. Choosing between animations and transitions depends on the complexity of the desired effect: use transitions for simple state changes and animations for more elaborate, multi-step sequences.",
      "example": "@keyframes slide-in {\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.animated-element {\n  animation: slide-in 0.5s ease-out;\n}\n\n.transition-element {\n  transition: all 0.3s ease;\n}\n\n.transition-element:hover {\n  transform: scale(1.1);\n}",
      "previewHtml": "<div class='animated-element'>Animated Content</div>\n<button class='transition-element'>Hover Me</button>",
      "practice": [
        "Create a loading spinner animation",
        "Implement a smooth hover effect on cards",
        "Build a fade-in animation for page elements"
      ],
      "quiz": [
        {
          "question": "Which property defines the duration of a CSS animation?",
          "options": ["animation-speed", "animation-duration", "animation-time", "duration"],
          "correctAnswer": 1
        },
        {
          "question": "What is the purpose of animation-fill-mode?",
          "options": [
            "Sets the animation color",
            "Defines how styles are applied before and after the animation",
            "Controls animation direction",
            "Sets animation speed"
          ],
          "correctAnswer": 1
        },
        {
          "question": "What is the difference between CSS Animations and CSS Transitions?",
          "options": ["Animations are for single property changes, Transitions for multiple.", "Transitions are triggered by keyframes, Animations by state changes.", "Animations allow for complex keyframe sequences, Transitions are for simple two-state changes.", "There is no difference, they are interchangeable."],
          "correctAnswer": 2
        },
        {
          "question": "Which timing function creates a slow start, fast middle, and slow end effect?",
          "options": ["ease-in", "ease-out", "linear", "ease-in-out"],
          "correctAnswer": 3
        },
        {
          "question": "How do you make an animation repeat indefinitely?",
          "options": ["animation-iteration-count: infinite;", "animation-repeat: infinite;", "animation-loop: true;", "animation-count: 0;"],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": "@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n.loader {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}",
          "result": "A spinning loader animation"
        },
        {
          "code": "@keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.fade-element {\n  animation: fade-in 1s ease-in forwards;\n  opacity: 0; /* Initial opacity */\n}",
          "result": "A fade-in animation for an element"
        },
        {
          "code": ".card-transition {\n  background-color: #f0f0f0;\n  padding: 1.5rem;\n  border-radius: 8px;\n  transition: transform 0.3s ease-out, box-shadow 0.3s ease-out;\n}\n\n.card-transition:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}",
          "result": "A card with a smooth hover effect using transitions"
        }
      ],
      "keyPoints": [
        "Use `@keyframes` for complex, multi-step animations.",
        "Use CSS Transitions for simple, two-state property changes.",
        "Consider animation performance and use hardware-accelerated properties like `transform` and `opacity` where possible.",
        "Animation timing functions (`ease`, `linear`, `ease-in`, `ease-out`, `ease-in-out`, `cubic-bezier()`) control the animation speed curve for natural movement.",
        "Animation properties include `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.",
        "Transitions are defined using the `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay` properties (or the shorthand `transition`).",
        "Animations can be controlled and triggered using JavaScript for more interactive effects."
      ]
    },
    {
      "id": "responsive",
      "technology": "css",
      "category": "layout",
      "title": "Responsive Design",
      "description": "Learn techniques for creating websites that work across all devices",
      "difficulty": "intermediate",
      "explanation": "Responsive Design is an essential approach in modern web development, ensuring that web pages adapt and provide an optimal viewing experience across a wide range of devices, from mobile phones to desktop monitors. It's not just about making a website 'mobile-friendly'; it's about creating a flexible and adaptable design that responds to the user's environment.  The key techniques in responsive design are: **Fluid Grids**, **Flexible Images**, and **Media Queries**.  **Fluid grids** are layouts that use relative units like percentages or `fr` units (in CSS Grid) instead of fixed pixel widths. This allows content to resize proportionally to the screen width.  **Flexible images** ensure images scale appropriately within their containers without overflowing or breaking the layout. This is often achieved using `max-width: 100%; height: auto;` in CSS. **Media queries** are the cornerstone of responsive design. They allow you to apply different CSS rules based on device characteristics such as screen width, height, orientation, resolution, and more.  By using `@media` rules, you can define breakpoints at which your layout and styles change to suit different screen sizes. A common strategy is to adopt a **mobile-first approach**, where you start by designing for mobile devices and then enhance the design for larger screens using media queries.  Beyond layout, responsive design also involves considering typography, touch interactions, and performance optimization for different devices. It's about creating a seamless and user-friendly experience, regardless of how a user accesses your website.",
      "example": "/* Base styles */\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 1rem;\n}\n\n/* Responsive grid */\n.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1rem;\n}\n\n/* Media queries */\n@media (max-width: 768px) {\n  .grid {\n    grid-template-columns: 1fr;\n  }\n\n  .header {\n    font-size: 1.5rem;\n  }\n}",
      "previewHtml": "<div class='container'>\n  <div class='grid'>\n    <div class='card'>Card 1</div>\n    <div class='card'>Card 2</div>\n    <div class='card'>Card 3</div>\n  </div>\n</div>",
      "practice": [
        "Create a responsive navigation menu",
        "Implement a mobile-first grid layout",
        "Build responsive typography using relative units"
      ],
      "quiz": [
        {
          "question": "What is the viewport meta tag used for?",
          "options": [
            "Setting page background",
            "Controlling the viewport's size and scale",
            "Defining page title",
            "Setting page width"
          ],
          "correctAnswer": 1
        },
        {
          "question": "Which unit is NOT relative?",
          "options": ["em", "rem", "px", "vw"],
          "correctAnswer": 2
        },
        {
          "question": "What are the three core components of responsive design?",
          "options": ["Fixed layouts, JavaScript, and CSS", "Fluid grids, flexible images, and media queries", "Tables, floats, and inline styles", "Flash, SVG, and animations"],
          "correctAnswer": 1
        },
        {
          "question": "What is the mobile-first approach in responsive design?",
          "options": ["Designing for desktop first and then scaling down to mobile.", "Designing for mobile first and then enhancing for larger screens.", "Creating separate mobile and desktop websites.", "Ignoring mobile devices and focusing on desktop."],
          "correctAnswer": 1
        },
        {
          "question": "Which media query feature is used to target devices in portrait or landscape orientation?",
          "options": ["aspect-ratio", "device-width", "orientation", "resolution"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".responsive-nav {\n  display: flex;\n  justify-content: space-between;\n  padding: 1rem;\n}\n\n@media (max-width: 768px) {\n  .responsive-nav {\n    flex-direction: column;\n    gap: 1rem;\n  }\n}",
          "result": "A responsive navigation layout"
        },
        {
          "code": ".responsive-grid-gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n.gallery-item-responsive {\n  width: 100%;\n  height: auto; /* Maintain aspect ratio */\n  max-width: 100%; /* Prevent overflow */\n  display: block;\n}",
          "result": "A responsive image gallery using CSS Grid and flexible images"
        },
        {
          "code": "body {\n  font-size: 16px;\n}\n\n@media (max-width: 600px) {\n  body {\n    font-size: 14px; /* Smaller font size for mobile */\n  }\n}\n\nh1 {\n  font-size: 2.5rem;\n}\n\n@media (max-width: 600px) {\n  h1 {\n    font-size: 2rem; /* Smaller heading for mobile */\n  }\n}",
          "result": "Responsive typography adapting font sizes for different screen sizes"
        }
      ],
      "keyPoints": [
        "Use relative units (%, em, rem, vw, vh) for flexible layouts.",
        "Implement mobile-first design for a streamlined development process.",
        "Test across different devices and screen sizes to ensure consistency.",
        "Choose appropriate breakpoints in media queries to target common device categories (mobile, tablet, desktop).",
        "Utilize flexible images using `max-width: 100%; height: auto;` to prevent layout breaks.",
        "Consider touch interactions and optimize for touch devices.",
        "Optimize performance for mobile devices, as they often have limited resources."
      ]
    },
    {
      "id": "variables",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Custom Properties (Variables)",
      "description": "Use CSS variables for maintainable and dynamic styling",
      "difficulty": "beginner",
      "explanation": "CSS Custom Properties, commonly known as CSS Variables, are a game-changer for CSS maintainability and theming. They allow you to define reusable values within your CSS that can be referenced and updated across your stylesheets. Unlike preprocessor variables (like Sass or Less variables), CSS variables are native to the browser and are dynamic, meaning they can be changed at runtime using JavaScript or even within CSS media queries.  To declare a CSS variable, you use the custom property notation, which starts with two hyphens `--`, followed by the variable name (e.g., `--primary-color`). Variable declarations are typically placed within `:root` pseudo-class to make them globally available, or within specific selectors for component-level scope.  To use a CSS variable, you use the `var()` function, passing the variable name as an argument (e.g., `color: var(--primary-color);`).  CSS variables are incredibly powerful for creating themeable websites, managing design tokens (like colors, spacing units, font families), and enhancing code readability by using semantic names instead of hardcoded values.  Because they are dynamic, CSS variables can be updated via JavaScript to create interactive themes or respond to user preferences, offering a level of flexibility that static CSS lacked before.",
      "example": ":root {\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n  --text-color: #333;\n  --spacing-unit: 1rem;\n}\n\n.button {\n  background-color: var(--primary-color);\n  color: white;\n  padding: var(--spacing-unit);\n  border: none;\n  border-radius: 4px;\n}\n\n.button:hover {\n  background-color: var(--secondary-color);\n}",
      "previewHtml": "<button class='button'>Click Me</button>",
      "practice": [
        "Create a theme system using CSS variables",
        "Implement dynamic color schemes",
        "Use variables for consistent spacing"
      ],
      "quiz": [
        {
          "question": "How do you declare a CSS variable?",
          "options": ["$variable", "@variable", "--variable", "var(variable)"],
          "correctAnswer": 2
        },
        {
          "question": "How do you use a CSS variable?",
          "options": ["@variable", "$variable", "var(--variable)", "--variable"],
          "correctAnswer": 2
        },
        {
          "question": "What is the typical scope of a CSS variable declared in `:root`?",
          "options": ["Local to the `:root` selector", "Limited to the current CSS file", "Global across the entire document", "Only accessible via JavaScript"],
          "correctAnswer": 2
        },
        {
          "question": "Can you use CSS variables within media queries?",
          "options": ["No, CSS variables are not allowed in media queries.", "Yes, to dynamically change variable values based on viewport size.", "Only for color values, not for layout properties.", "Only if declared globally in `:root`."],
          "correctAnswer": 1
        },
        {
          "question": "Which of the following is NOT a benefit of using CSS variables?",
          "options": ["Improved CSS maintainability", "Dynamic theming capabilities", "Reduced CSS file size", "Enhanced code readability"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ":root {\n  --theme-color: #3498db;\n}\n\n.theme-element {\n  background-color: var(--theme-color);\n  padding: 1rem;\n  color: white;\n  border-radius: 4px;\n}\n\n/* Try changing --theme-color to see the effect */",
          "result": "A themed element using CSS variables"
        },
        {
          "code": ":root {\n  --base-spacing: 1rem;\n}\n\n.spaced-element {\n  margin: var(--base-spacing);\n  padding: calc(var(--base-spacing) / 2);\n}",
          "result": "Consistent spacing using a CSS variable for margin and padding"
        },
        {
          "code": ":root {\n  --font-size-base: 16px;\n}\n\nbody {\n  font-size: var(--font-size-base);\n}\n\nh1 {\n  font-size: calc(var(--font-size-base) * 2);\n}\n\n@media (max-width: 768px) {\n  :root {\n    --font-size-base: 14px; /* Responsive font size adjustment */\n  }\n}",
          "result": "Responsive font sizes controlled by a CSS variable and media query"
        }
      ],
      "keyPoints": [
        "Variables must be prefixed with `--` in their declaration.",
        "Use `var()` function to access and apply variable values.",
        "CSS variables are dynamic and can be updated with JavaScript and within CSS itself.",
        "Variables have scope: declared in `:root` for global scope, or within selectors for local scope.",
        "CSS variables improve CSS maintainability, readability, and enable dynamic theming.",
        "They are native browser features, unlike preprocessor variables which are processed at build time.",
        "Use CSS variables for design tokens like colors, fonts, spacing, and breakpoints."
      ]
    },
    {
      "id": "css-selectors",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Selectors",
      "description": "Understand different CSS selectors to target HTML elements effectively",
      "difficulty": "beginner",
      "explanation": "CSS Selectors are the fundamental building blocks of CSS, allowing you to target specific HTML elements and apply styles to them. They are patterns that match against elements in the document tree, determining which style rules should be applied to which elements. Mastering CSS selectors is crucial for efficient and precise styling.  There are several categories of CSS selectors, including:  **Basic Selectors**:  * **Element Selectors (Type Selectors):** Target HTML elements by their tag name (e.g., `p`, `h1`, `div`).  * **Class Selectors:** Target elements with a specific class attribute, prefixed with a dot `.` (e.g., `.highlight`, `.button`).  * **ID Selectors:** Target a unique element with a specific ID attribute, prefixed with a hash `#` (e.g., `#main-header`, `#submit-button`).  * **Universal Selector:**  Selects all HTML elements, represented by an asterisk `*`.  **Attribute Selectors**: Target elements based on their attributes or attribute values (e.g., `a[href]`, `input[type='text']`).  **Pseudo-class Selectors**: Target elements based on their state or position in the DOM tree (e.g., `:hover`, `:focus`, `:nth-child()`).  **Pseudo-element Selectors**: Target specific parts of an element, rather than the whole element (e.g., `::before`, `::after`, `::first-line`).  **Combinators**: Define relationships between selectors:  * **Descendant Combinator (space):** Selects elements that are descendants of another element (e.g., `.container p`).  * **Child Combinator (`>`):** Selects elements that are direct children of another element (e.g., `.parent > .child`).  * **Adjacent Sibling Combinator (`+`):** Selects an element that is the immediately following sibling of another element (e.g., `h2 + p`).  * **General Sibling Combinator (`~`):** Selects elements that are siblings (not necessarily immediately following) of another element (e.g., `div ~ p`).  Understanding selector specificity is also vital. Specificity determines which CSS rule is applied when multiple rules target the same element. Selectors with higher specificity override those with lower specificity.",
      "example": "/* Element selector */\np {\n  color: #333;\n}\n\n/* Class selector */\n.highlight {\n  background-color: yellow;\n}\n\n/* ID selector */\n#main-header {\n  font-size: 2rem;\n}\n\n/* Attribute selector */\na[href^='https'] {\n  color: blue;\n}",
      "previewHtml": "<p>This is a paragraph.</p>\n<p class='highlight'>This paragraph is highlighted.</p>\n<h1 id='main-header'>Main Header</h1>\n<a href='https://www.example.com'>External Link</a>",
      "practice": [
        "Style all paragraphs with a specific font size",
        "Change the color of links with a certain attribute",
        "Apply unique styles to elements with specific IDs"
      ],
      "quiz": [
        {
          "question": "Which selector targets an element with a class?",
          "options": ["#class-name", ".class-name", "element.class-name", "class-name"],
          "correctAnswer": 1
        },
        {
          "question": "Which selector has the highest specificity?",
          "options": ["Class selector", "ID selector", "Element selector", "Attribute selector"],
          "correctAnswer": 1
        },
        {
          "question": "What does the '*' selector target?",
          "options": ["All HTML elements", "Only body element", "Elements with class '*'", "Elements with id '*'"],
          "correctAnswer": 0
        },
        {
          "question": "Which combinator selects elements that are direct children of another element?",
          "options": ["Descendant combinator (space)", "Child combinator (`>`)", "Adjacent sibling combinator (`+`)", "General sibling combinator (`~`)"],
          "correctAnswer": 1
        },
        {
          "question": "In terms of specificity, which is more specific: a class selector or an attribute selector?",
          "options": ["Class selector", "Attribute selector", "They have equal specificity", "It depends on the attribute"],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": "/* Try different selectors to change the styles */\n.container p {\n  color: red;\n}\n\n#unique-paragraph {\n  font-weight: bold;\n}",
          "result": "Styling elements using different CSS selectors"
        },
        {
          "code": "/* Example of combinators */\n.list-container > li {\n  list-style-type: square;\n}\n\n.article p + p {\n  margin-top: 1em; /* Space between paragraphs */\n}",
          "result": "Demonstrating child and adjacent sibling combinators"
        },
        {
          "code": "/* Pseudo-class example */\na:hover {\n  text-decoration: underline;\n  color: darkgreen;\n}\n\n/* Pseudo-element example */\np::first-line {\n  font-weight: bold;\n}",
          "result": "Examples of pseudo-class and pseudo-element selectors"
        }
      ],
      "keyPoints": [
        "Selectors target HTML elements to apply styles.",
        "Different types of selectors: element, class, ID, attribute, pseudo-class, pseudo-element, and combinators.",
        "Specificity determines which styles are applied when multiple rules conflict.",
        "Combinators (descendant, child, adjacent sibling, general sibling) allow for complex selections based on element relationships.",
        "Pseudo-classes target elements based on state (e.g., `:hover`, `:focus`).",
        "Pseudo-elements target specific parts of an element (e.g., `::before`, `::first-line`).",
        "Mastering CSS selectors is fundamental for precise and efficient CSS styling."
      ]
    },
    {
      "id": "css-box-model",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Box Model",
      "description": "Understand the CSS Box Model to control element spacing and dimensions",
      "difficulty": "beginner",
      "explanation": "The CSS Box Model is a cornerstone concept in CSS layout. Every HTML element is treated as a rectangular box, and the box model describes how the total space an element occupies is calculated. It consists of four main components, layered around the element's actual content:  **Content**: The innermost part of the box, where the actual text, images, or other content of the element resides. Its dimensions are defined by properties like `width` and `height`.  **Padding**: The space immediately surrounding the content, inside the element's border. Padding creates internal spacing within the element. It's controlled by `padding-top`, `padding-right`, `padding-bottom`, `padding-left`, or the shorthand `padding`.  **Border**:  A line that surrounds the padding (and content). Borders visually define the element's edges. Border styles, widths, and colors are set using `border-width`, `border-style`, `border-color`, or the shorthand `border`.  **Margin**: The outermost layer of the box model, creating space around the element, outside of its border. Margins separate the element from its neighboring elements. Margins are controlled by `margin-top`, `margin-right`, `margin-bottom`, `margin-left`, or the shorthand `margin`.  When you set `width` and `height` for an element, you are typically setting the dimensions of the **content box**. The total width and height of the element as rendered on the page are then calculated by adding padding, border, and margin to the content dimensions.  The `box-sizing` property alters this default behavior. By default, `box-sizing` is set to `content-box`, meaning padding and border are added *to* the content's width and height. Setting `box-sizing: border-box` changes this so that `width` and `height` properties include the padding and border, making it easier to control the overall size of elements, as the specified width and height become the *total* width and height of the rendered box (content + padding + border). Understanding the box model is crucial for controlling spacing, alignment, and dimensions of elements in web layouts.",
      "example": ".box {\n  width: 200px;\n  height: 100px;\n  padding: 20px;\n  border: 5px solid black;\n  margin: 30px;\n  background-color: #f0f0f0;\n}",
      "previewHtml": "<div class='box'>Content</div>",
      "practice": [
        "Create boxes with different padding and margins",
        "Experiment with border styles and widths",
        "Calculate the total width and height of a box"
      ],
      "quiz": [
        {
          "question": "What are the components of the CSS Box Model in order from innermost to outermost?",
          "options": ["Margin, Border, Padding, Content", "Content, Padding, Border, Margin", "Border, Padding, Content, Margin", "Padding, Content, Margin, Border"],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS property controls the space between the border and the content?",
          "options": ["margin", "border-spacing", "padding", "content-spacing"],
          "correctAnswer": 2
        },
        {
          "question": "What is the default value of 'box-sizing'?",
          "options": ["content-box", "border-box", "padding-box", "inherit"],
          "correctAnswer": 0
        },
        {
          "question": "If an element has `width: 200px`, `padding: 20px`, and `border: 5px`, and `box-sizing` is `content-box`, what is the total width of the element?",
          "options": ["200px", "220px", "240px", "250px"],
          "correctAnswer": 3
        },
        {
          "question": "What is the purpose of 'box-sizing: border-box;'?",
          "options": ["To include margin in the element's total size.", "To exclude padding and border from the element's total size.", "To make width and height include padding and border.", "To only apply borders to the content box."],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-box {\n  width: 150px;\n  height: 80px;\n  background-color: lightblue;\n  border: 2px dashed red;\n  /* Try changing padding and margin values */\n  padding: 10px;\n  margin: 15px;\n}",
          "result": "A box demonstrating the CSS Box Model"
        },
        {
          "code": ".box-sizing-example {\n  width: 200px;\n  height: 100px;\n  padding: 20px;\n  border: 10px solid green;\n  box-sizing: border-box; /* Try changing to content-box */\n  background-color: lightyellow;\n}",
          "result": "Example demonstrating the effect of 'box-sizing: border-box;'"
        },
        {
          "code": ".margin-collapse-example {\n  margin-bottom: 30px; /* On this element */\n}\n\n.next-element {\n  margin-top: 20px; /* On the next element */\n  background-color: lightpink;\n  padding: 10px;\n}",
          "result": "Demonstration of vertical margin collapsing between elements"
        }
      ],
      "keyPoints": [
        "Components of the Box Model: Content, Padding, Border, Margin.",
        "Padding is the space inside the border, between the border and the content.",
        "Margin is the space outside the border, separating the element from others.",
        "`box-sizing: content-box` (default) makes width/height apply to content only; padding and border are added.",
        "`box-sizing: border-box` makes width/height include padding and border, simplifying size control.",
        "Horizontal margins are typically additive, while vertical margins can collapse in certain situations.",
        "Understanding the box model is essential for controlling layout, spacing, and element dimensions."
      ]
    },
    {
      "id": "css-transitions",
      "technology": "css",
      "category": "animation",
      "title": "CSS Transitions",
      "description": "Create smooth property changes with CSS transitions",
      "difficulty": "beginner",
      "explanation": "CSS Transitions provide a simple yet effective way to animate changes to CSS property values over a specified duration. They are triggered automatically when a CSS property value changes, typically in response to user interactions or state changes, such as hovering, focusing, or toggling a class. Transitions are ideal for creating subtle, performant animations for enhancing user interface interactions and providing visual feedback.  To implement a CSS transition, you need to specify two main things:  **Which properties to transition**: You use the `transition-property` property to list the CSS properties that should be animated. You can transition a single property, multiple properties (comma-separated), or all animatable properties using `all`.  **Transition duration**: You define how long the transition should take using the `transition-duration` property, usually in seconds (`s`) or milliseconds (`ms`).  Optionally, you can also control:  **Transition timing function**: The `transition-timing-function` property determines the animation's speed curve over its duration. Common values include `ease`, `linear`, `ease-in`, `ease-out`, `ease-in-out`, and `cubic-bezier()` for custom curves.  **Transition delay**: The `transition-delay` property specifies a delay before the transition starts, also in seconds or milliseconds.  All these properties can be combined into the shorthand `transition` property, which takes values in the order: `transition-property transition-duration transition-timing-function transition-delay`.  Transitions are best suited for animating simple, two-state changes. For more complex, multi-step animations, CSS Animations using `@keyframes` are more appropriate. However, for common UI interactions like hover effects, button state changes, and basic element movements, transitions offer a straightforward and performant solution.",
      "example": ".transition-button {\n  background-color: #3498db;\n  color: white;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.3s ease-in-out, transform 0.3s ease-in-out;\n}\n\n.transition-button:hover {\n  background-color: #217dbb;\n  transform: scale(1.05);\n}",
      "previewHtml": "<button class='transition-button'>Hover Me</button>",
      "practice": [
        "Create hover effects for buttons and links",
        "Animate color changes on element focus",
        "Implement smooth scaling animations on images"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to specify which properties should have transitions?",
          "options": ["transition-property", "animation-property", "transform-property", "effect-property"],
          "correctAnswer": 0
        },
        {
          "question": "What does 'ease-in-out' refer to in 'transition-timing-function'?",
          "options": ["Animation speed", "Transition duration", "Easing function", "Delay time"],
          "correctAnswer": 2
        },
        {
          "question": "Is 'transition' property shorthand or longhand?",
          "options": ["Longhand", "Shorthand"],
          "correctAnswer": 1
        },
        {
          "question": "What triggers a CSS transition to start?",
          "options": ["Page load", "JavaScript event", "CSS property value change", "Timer expiration"],
          "correctAnswer": 2
        },
        {
          "question": "Which of the following is NOT a component of the 'transition' shorthand property?",
          "options": ["transition-property", "transition-duration", "transition-delay", "transition-iteration-count"],
          "correctAnswer": 3
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-element {\n  width: 100px;\n  height: 100px;\n  background-color: orange;\n  transition: width 0.5s ease, height 0.5s ease;\n}\n\n.interactive-element:hover {\n  width: 150px;\n  height: 150px;\n}",
          "result": "An element with smooth transitions on hover"
        },
        {
          "code": ".color-transition-button {\n  background-color: #27ae60;\n  color: white;\n  padding: 1rem;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.4s ease;\n}\n\n.color-transition-button:focus {\n  background-color: #219653;\n  outline: none; /* Remove default focus outline */\n}",
          "result": "A button with a color transition on focus"
        },
        {
          "code": ".scale-image-transition {\n  width: 200px;\n  height: auto;\n  transition: transform 0.3s ease-in-out;\n}\n\n.scale-image-transition:hover {\n  transform: scale(1.1);\n}",
          "result": "An image with a smooth scaling transition on hover"
        }
      ],
      "keyPoints": [
        "Transitions animate CSS property changes smoothly over time.",
        "Transitions are triggered by state changes, such as `:hover`, `:focus`, or JavaScript style modifications.",
        "Key properties for transitions are `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`, often used in the `transition` shorthand.",
        "Timing functions (easing functions) control the animation's speed curve, affecting its perceived smoothness.",
        "Transitions are ideal for simple, two-state animations and enhancing UI interactions.",
        "They are hardware-accelerated, providing good performance for web animations.",
        "Transitions are generally simpler to implement than `@keyframes` animations for basic effects."
      ]
    },
    {
      "id": "css-pseudo-classes",
      "technology": "css",
      "category": "selectors",
      "title": "CSS Pseudo-classes",
      "description": "Style elements based on state or position using CSS pseudo-classes",
      "difficulty": "intermediate",
      "explanation": "CSS Pseudo-classes are powerful keywords that extend the reach of CSS selectors, allowing you to style elements based on dynamic states, structural positions in the document tree, or user interactions. Unlike regular CSS classes, pseudo-classes are not explicitly added to HTML; instead, they are dynamically applied by the browser based on element state or context.  Common categories of pseudo-classes include:  **User-action pseudo-classes**: Respond to user interactions like `:hover` (when the mouse pointer is over an element), `:active` (when an element is being activated, e.g., clicked), `:focus` (when an element has focus, e.g., an input field).  **Structural pseudo-classes**: Select elements based on their position in the DOM tree relative to siblings, such as `:first-child`, `:last-child`, `:nth-child()`, `:nth-of-type()`, `:only-child`, `:only-of-type()`. These are useful for styling lists, tables, and other structured content.  **Form-related pseudo-classes**: Target form elements based on their state, like `:enabled`, `:disabled`, `:checked`, `:valid`, `:invalid`, `:required`, `:optional`.  **Link-related pseudo-classes**: Style links based on their state: `:link` (for unvisited links), `:visited` (for visited links), `:hover` (for links on hover), `:active` (for active links).  **Other pseudo-classes**:  Include `:lang()` (to target elements based on language), `:not()` (negation pseudo-class), `:target` (for the target of a URL hash), and more.  Pseudo-classes are appended to selectors using a colon `:` (single colon for CSS2 pseudo-classes, though modern browsers accept both single and double colons `::` for most pseudo-classes for consistency with pseudo-elements). They enhance styling capabilities by enabling you to create interactive, context-aware designs without needing JavaScript for many common dynamic styling scenarios. Understanding and utilizing pseudo-classes effectively is crucial for creating modern, user-friendly web interfaces.",
      "example": "/* Link states */\na:link {\n  color: blue;\n}\n\na:visited {\n  color: purple;\n}\n\na:hover {\n  color: red;\n}\n\n/* Input focus */\ninput:focus {\n  border-color: green;\n  box-shadow: 0 0 5px green;\n}\n\n/* Nth-child */\nli:nth-child(even) {\n  background-color: #f0f0f0;\n}",
      "previewHtml": "<a href='#'>Link</a>\n<input type='text' placeholder='Focus me'>\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>",
      "practice": [
        "Style links differently based on their state (link, visited, hover, active)",
        "Highlight form inputs when they are focused",
        "Create zebra-striped lists using `:nth-child()`"
      ],
      "quiz": [
        {
          "question": "Which pseudo-class is used to style an element when the mouse pointer is over it?",
          "options": [":active", ":focus", ":hover", ":visited"],
          "correctAnswer": 2
        },
        {
          "question": "What does the `:nth-child(odd)` pseudo-class select?",
          "options": ["First child element", "Last child element", "Even child elements", "Odd child elements"],
          "correctAnswer": 3
        },
        {
          "question": "Which pseudo-class styles an element when it is being actively selected (e.g., mouse button pressed)?",
          "options": [":hover", ":focus", ":active", ":target"],
          "correctAnswer": 2
        },
        {
          "question": "Which structural pseudo-class selects the first element among siblings?",
          "options": [":last-child", ":first-of-type", ":nth-child(1)", ":first-child"],
          "correctAnswer": 3
        },
        {
          "question": "Which pseudo-class targets an input element that is required in a form?",
          "options": [":required", ":optional", ":valid", ":invalid"],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": "/* Try changing pseudo-class selectors and styles */\nbutton:hover {\n  background-color: lightgreen;\n  color: black;\n}\n\ninput:focus {\n  outline: none; /* Remove default outline */\n  border: 2px solid blue;\n}",
          "result": "Elements styled using CSS pseudo-classes"
        },
        {
          "code": "/* Example of structural pseudo-classes */\nul li:first-child {\n  font-weight: bold;\n}\n\nol li:nth-of-type(3n) {\n  color: purple;\n}",
          "result": "Styling list items using structural pseudo-classes"
        },
        {
          "code": "/* Form pseudo-class example */\ninput:invalid {\n  border-color: red;\n}\n\ninput:valid {\n  border-color: green;\n}",
          "result": "Form input validation feedback using :valid and :invalid pseudo-classes"
        }
      ],
      "keyPoints": [
        "Pseudo-classes define element states, positions, or conditions.",
        "Examples include user-action (:hover, :active, :focus), structural (:nth-child, :first-child), form-related (:required, :invalid), and link-related (:link, :visited) pseudo-classes.",
        "Pseudo-classes enhance interactivity and dynamic styling without modifying HTML classes.",
        "Used in CSS selectors to apply styles conditionally based on element state or context.",
        "They are dynamically applied by the browser, not explicitly set in HTML.",
        "Understanding pseudo-classes is essential for creating modern and interactive web experiences."
      ]
    },
    {
      "id": "css-transforms",
      "technology": "css",
      "category": "effects",
      "title": "CSS Transforms",
      "description": "Manipulate element appearance in 2D and 3D space using CSS transforms",
      "difficulty": "intermediate",
      "explanation": "CSS Transforms provide a powerful toolkit for manipulating the visual appearance of HTML elements in two-dimensional (2D) and three-dimensional (3D) space. They allow you to alter an element's shape, size, position, and orientation without affecting the document flow or layout in the same way as positioning properties. Transforms are hardware-accelerated by modern browsers, making them performant for animations and visual effects.  The primary CSS property for applying transformations is `transform`. It accepts various transformation functions, including:  **2D Transforms**:  * `translate(tx, ty)`: Moves an element along the X and Y axes. * `translateX(tx)`: Moves horizontally. * `translateY(ty)`: Moves vertically. * `scale(sx, sy)`: Resizes an element in both X and Y dimensions. * `scaleX(sx)`: Resizes horizontally. * `scaleY(sy)`: Resizes vertically. * `rotate(angle)`: Rotates an element around its origin. * `skewX(angle)`: Skews along the X axis. * `skewY(angle)`: Skews along the Y axis.  **3D Transforms**:  * `translateZ(tz)`: Moves along the Z axis (towards or away from the viewer). * `scaleZ(sz)`: Scales along the Z axis. * `rotateX(angle)`: Rotates around the X axis. * `rotateY(angle)`: Rotates around the Y axis. * `rotateZ(angle)`: Rotates around the Z axis (same as 2D `rotate()`). * `perspective(length)`: Sets the 3D perspective for child elements.  The `transform-origin` property is crucial for controlling the point around which transformations are applied (e.g., for rotation and scaling). By default, it's set to `center`.  Transforms can be combined and chained together within a single `transform` property value. They are widely used for creating animations, hover effects, interactive UI elements, and more sophisticated visual layouts. Because transforms are hardware-accelerated, they offer a performant way to create visual dynamism on the web.",
      "example": ".transform-box {\n  width: 150px;\n  height: 100px;\n  background-color: #a0d468;\n  transition: transform 0.5s ease-in-out;\n}\n\n.transform-box:hover {\n  transform: rotate(45deg) scale(1.2);\n}",
      "previewHtml": "<div class='transform-box'>Transform Me</div>",
      "practice": [
        "Create a rotating element on hover",
        "Scale images on focus for better visual feedback",
        "Implement a skewed card layout for a unique design"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to apply 2D or 3D transformations?",
          "options": ["transition", "animation", "transform", "effect"],
          "correctAnswer": 2
        },
        {
          "question": "What transform function is used to move an element along the X and Y axes?",
          "options": ["rotate()", "scale()", "translate()", "skew()"],
          "correctAnswer": 2
        },
        {
          "question": "Which value of 'transform-origin' sets the origin to the bottom right corner?",
          "options": ["top left", "center", "bottom right", "0% 0%"],
          "correctAnswer": 2
        },
        {
          "question": "Are CSS Transforms hardware-accelerated?",
          "options": ["No, they are software-rendered.", "Yes, by modern browsers.", "Only 2D transforms are hardware-accelerated.", "It depends on the browser."],
          "correctAnswer": 1
        },
        {
          "question": "What is the default 'transform-origin' value?",
          "options": ["top left", "bottom right", "center", "0% 0%"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-transform {\n  width: 80px;\n  height: 80px;\n  background-color: #e67e22;\n  transition: transform 0.3s linear;\n}\n\n.interactive-transform:hover {\n  transform: translateX(20px) translateY(-10px) rotate(180deg);\n}",
          "result": "An element with multiple transforms on hover"
        },
        {
          "code": ".card-skew-example {\n  padding: 1.5rem;\n  background-color: #f0f0f0;\n  border-radius: 8px;\n  transition: transform 0.3s ease-out;\n}\n\n.card-skew-example:hover {\n  transform: skewX(-10deg);\n}",
          "result": "A card element with a skew transform on hover"
        },
        {
          "code": ".rotate-origin-example {\n  width: 100px;\n  height: 100px;\n  background-color: #3498db;\n  transition: transform 0.5s ease-in-out;\n  transform-origin: top left; /* Rotate from top-left corner */\n}\n\n.rotate-origin-example:hover {\n  transform: rotate(90deg);\n}",
          "result": "Rotation transform with a custom 'transform-origin'"
        }
      ],
      "keyPoints": [
        "CSS Transforms allow for 2D and 3D manipulations of elements.",
        "Common transform functions include `translate()`, `rotate()`, `scale()`, and `skew()`.",
        "Transforms are hardware-accelerated, making them performant for animations and effects.",
        "`transform-origin` property controls the point of origin for transformations like rotation and scaling.",
        "Transforms can be combined and chained to create complex visual effects.",
        "They are used extensively for creating interactive UI elements, hover effects, and animations.",
        "Transforms do not affect the document flow, unlike positioning properties."
      ]
    },
    {
      "id": "css-functions",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Functions",
      "description": "Utilize CSS functions to perform calculations and manipulate values dynamically",
      "difficulty": "intermediate",
      "explanation": "CSS Functions are a set of powerful tools within CSS that enable you to perform calculations, manipulate values, and introduce dynamic behavior directly in your stylesheets. They go beyond simple static values, allowing for more flexible and responsive designs.  Key categories of CSS functions include:  **Mathematical Functions**:  * `calc()`: Performs mathematical calculations with CSS values (e.g., lengths, angles, percentages). It supports addition, subtraction, multiplication, and division, allowing for dynamic sizing and spacing.  * `min()`: Returns the smallest of one or more comma-separated values.  * `max()`: Returns the largest of one or more comma-separated values.  * `clamp(min, preferred, max)`: Clamps a value within a specified range, useful for responsive font sizes and element dimensions.  **Color Functions**:  * `rgb()`, `rgba()`, `hsl()`, `hsla()`: Define colors using RGB, RGBA, HSL, and HSLA color models.  * `color-mix(in lch, color1 lch-percentage, color2)`: Mixes two colors together, offering advanced color manipulation. * `color-contrast()`: Selects the color from a list that provides the best contrast with a specified background color.  **Gradient Functions**:  * `linear-gradient()`, `radial-gradient()`, `conic-gradient()`, `repeating-linear-gradient()`, `repeating-radial-gradient()`, `repeating-conic-gradient()`: Create various types of gradients for backgrounds and borders.  **Filter Functions**:  * `blur()`, `grayscale()`, `brightness()`, `contrast()`, `sepia()`, `hue-rotate()`, `invert()`, `opacity()`, `saturate()`, `drop-shadow()`: Apply graphical effects to elements.  **Other Functions**:  * `var()`: Access and use CSS Custom Properties (variables).  * `url()`: Specify URLs, often for background images or fonts.  * `attr()`: Retrieve the value of an HTML attribute and use it in CSS.  * `cubic-bezier()`: Define custom easing functions for animations and transitions.  CSS functions significantly enhance the capabilities of CSS, allowing for more dynamic, responsive, and maintainable stylesheets. They enable you to handle complex calculations, color manipulations, and dynamic value adjustments directly in your CSS code, reducing the need for JavaScript in many cases.",
      "example": ".function-box {\n  width: calc(100% - 2rem);\n  height: 100px;\n  background-color: #9b59b6;\n  margin: 1rem;\n  color: white;\n  padding: 1rem;\n}\n\n.dynamic-font {\n  font-size: clamp(1rem, 4vw, 2rem);\n}",
      "previewHtml": "<div class='function-box'>Dynamic Width</div>\n<p class='dynamic-font'>Dynamic Font Size</p>",
      "practice": [
        "Use `calc()` to create responsive layouts with complex spacing",
        "Implement dynamic font sizes using `clamp()` for better readability",
        "Experiment with color manipulation functions like `color-mix()`"
      ],
      "quiz": [
        {
          "question": "Which CSS function is used to perform mathematical calculations?",
          "options": ["function()", "calculate()", "math()", "calc()"],
          "correctAnswer": 3
        },
        {
          "question": "What does the `min()` function do?",
          "options": ["Returns the minimum value from a list", "Minimizes an element's size", "Sets a minimum font size", "Reduces animation speed"],
          "correctAnswer": 0
        },
        {
          "question": "Which function can be used to mix two colors in CSS?",
          "options": ["color-blend()", "mix-color()", "blend()", "color-mix()"],
          "correctAnswer": 3
        },
        {
          "question": "What is the purpose of the `clamp()` function?",
          "options": ["To clamp text content within an element.", "To set a fixed value for a property.", "To restrict a value to a specified range.", "To calculate the maximum value."],
          "correctAnswer": 2
        },
        {
          "question": "Which function is used to access CSS Custom Properties (variables)?",
          "options": ["css-var()", "get-variable()", "variable()", "var()"],
          "correctAnswer": 3
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-calc {\n  width: calc(50% - 30px);\n  height: 60px;\n  background-color: #1abc9c;\n  margin-left: 30px;\n  color: white;\n  padding: 1rem;\n}",
          "result": "Element width calculated using calc()"
        },
        {
          "code": ".dynamic-padding {\n  padding: clamp(0.5rem, 5vw, 2rem);\n  background-color: #f39c12;\n  color: white;\n}",
          "result": "Dynamic padding that clamps between 0.5rem and 2rem, scaling with viewport width"
        },
        {
          "code": ".color-mix-example {\n  background-color: color-mix(in srgb, blue 60%, red 40%); /* Mix blue and red */\n  height: 100px;\n}",
          "result": "Background color created by mixing two colors using 'color-mix()'"
        }
      ],
      "keyPoints": [
        "CSS Functions enhance CSS with dynamic and computational capabilities.",
        "Mathematical functions (`calc()`, `min()`, `max()`, `clamp()`) for calculations and value manipulation.",
        "Color functions (`rgb()`, `hsl()`, `color-mix()`, etc.) for advanced color control.",
        "`calc()` is essential for responsive layouts and dynamic sizing.",
        "`clamp()` is useful for creating fluid typography and constrained element dimensions.",
        "CSS functions reduce the need for JavaScript in many styling scenarios.",
        "They contribute to more maintainable and flexible CSS stylesheets."
      ]
    },
    {
      "id": "css-backgrounds-borders",
      "technology": "css",
      "category": "styling",
      "title": "CSS Backgrounds & Borders",
      "description": "Style element backgrounds and borders with various properties and effects",
      "difficulty": "beginner",
      "explanation": "CSS Backgrounds and Borders are fundamental for visually styling HTML elements. They allow you to control the visual appearance of elements, making them distinct, engaging, and aligned with your design aesthetics.  **CSS Backgrounds** encompass a wide range of properties for customizing the background of an element:  * `background-color`: Sets the background color, using color names, hex codes, RGB, RGBA, HSL, HSLA, etc. * `background-image`: Sets an image as the background. Can be a URL to an image file or a CSS gradient function. * `background-repeat`: Controls how the background image is repeated (`repeat`, `no-repeat`, `repeat-x`, `repeat-y`, `space`, `round`). * `background-size`: Specifies the size of the background image (`auto`, `cover`, `contain`, or specific dimensions). * `background-position`: Sets the starting position of the background image within the element. * `background-origin`: Determines the origin of the background image (`padding-box`, `border-box`, `content-box`). * `background-clip`: Specifies how far the background should extend within an element (`border-box`, `padding-box`, `content-box`, `text`). * `background-attachment`: Sets whether the background image is fixed or scrolls with the content (`scroll`, `fixed`, `local`). * `background-blend-mode`: Defines how the background image should blend with the background color or other background images.  **CSS Borders** are used to draw lines around elements, creating visual boundaries:  * `border-width`: Sets the thickness of the border. * `border-style`: Defines the style of the border line (`solid`, `dashed`, `dotted`, `double`, `groove`, `ridge`, `inset`, `outset`, `none`, `hidden`). * `border-color`: Sets the color of the border.  These properties can be set individually for each side (top, right, bottom, left) using properties like `border-top-width`, `border-right-style`, `border-bottom-color`, etc. Shorthand properties like `border`, `border-top`, `border-right`, `border-bottom`, and `border-left` are also available for setting multiple border properties at once.  * `border-radius`: Rounds the corners of the border, creating rounded boxes or circles.  Mastering CSS backgrounds and borders is essential for creating visually rich and well-defined web elements, contributing significantly to the overall design and user experience of a website.",
      "example": ".bg-border-box {\n  width: 200px;\n  height: 150px;\n  background-color: #f9e79f;\n  border: 3px solid #d4ac0d;\n  border-radius: 8px;\n  padding: 1rem;\n  background-image: linear-gradient(to bottom right, #f9e79f, #f4d03f);\n}",
      "previewHtml": "<div class='bg-border-box'>Styled Box</div>",
      "practice": [
        "Create boxes with different background colors and gradients",
        "Experiment with various border styles and widths",
        "Apply background images and control their properties"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to set the background color of an element?",
          "options": ["color", "background-color", "element-color", "fill-color"],
          "correctAnswer": 1
        },
        {
          "question": "Which property sets the style of an element's border?",
          "options": ["border-style", "border-type", "style-border", "type-border"],
          "correctAnswer": 0
        },
        {
          "question": "What does 'border-radius' property do?",
          "options": ["Sets border color", "Sets border width", "Rounds the corners of an element", "Makes border dashed"],
          "correctAnswer": 2
        },
        {
          "question": "Which value of 'background-repeat' prevents a background image from repeating?",
          "options": ["repeat", "no-repeat", "repeat-x", "repeat-y"],
          "correctAnswer": 1
        },
        {
          "question": "What does 'background-size: cover;' do?",
          "options": ["Scales the background image to cover the entire element, potentially cropping it.", "Scales the background image to fit entirely within the element, potentially leaving empty space.", "Sets the background image size to the element's content size.", "Removes the background image."],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-bg-border {\n  width: 120px;\n  height: 90px;\n  background-image: url('image.png'); /* Replace with a valid image URL */\n  border: 4px dashed blue;\n  background-size: cover;\n}",
          "result": "Element with background image and dashed border"
        },
        {
          "code": ".gradient-border-example {\n  width: 250px;\n  height: 100px;\n  border: 5px solid transparent;\n  padding: 1rem;\n  border-image: linear-gradient(to right, #ff7e5f, #feb47b) 1;\n  border-radius: 8px;\n}",
          "result": "Element with a gradient border using 'border-image'"
        },
        {
          "code": ".rounded-box-example {\n  width: 150px;\n  height: 150px;\n  background-color: lightcoral;\n  border-radius: 50%; /* Make it a circle */\n}",
          "result": "Creating a circular element using 'border-radius: 50%'"
        }
      ],
      "keyPoints": [
        "Background properties control colors, images, gradients, repetition, size, position, and blending.",
        "Border properties define style, width, color, and radius of element borders.",
        "Use CSS gradients (`linear-gradient`, `radial-gradient`, `conic-gradient`) for smooth background transitions and effects.",
        "Control background image behavior with `background-repeat` and `background-size` properties.",
        "Borders can be styled individually for each side or all sides at once using shorthand properties.",
        "`border-radius` is used to create rounded corners, and `border-image` for more complex border styling.",
        "Effective use of backgrounds and borders is crucial for visual hierarchy and design aesthetics."
      ]
    },
    {
      "id": "css-positioning",
      "technology": "css",
      "category": "layout",
      "title": "CSS Positioning",
      "description": "Control the layout of elements on the page using CSS positioning properties",
      "difficulty": "intermediate",
      "explanation": "CSS Positioning is a fundamental aspect of CSS layout, allowing you to control the placement of elements on a webpage with precision. The `position` property determines how an element is positioned in the document flow. There are five main values for the `position` property:  **static**: This is the default value. Elements are positioned according to the normal document flow. `top`, `right`, `bottom`, `left`, and `z-index` properties have no effect on statically positioned elements.  **relative**: Elements are positioned relative to their normal position in the document flow. Using `top`, `right`, `bottom`, `left` will offset the element from its normal position without affecting the layout of surrounding elements. Relative positioning is often used as a starting point for absolute positioning of child elements.  **absolute**: Elements are removed from the normal document flow and positioned relative to their nearest positioned ancestor (an ancestor with `position` set to `relative`, `absolute`, or `fixed`). If no positioned ancestor is found, they are positioned relative to the initial containing block (the `<html>` element). Absolute positioned elements can overlap other content.  **fixed**: Elements are removed from the normal document flow and positioned relative to the viewport (browser window). They do not scroll with the rest of the page content, remaining fixed in place. Fixed positioning is commonly used for navigation bars that stay at the top of the viewport or for chat widgets that remain in a corner of the screen.  **sticky**: Elements are initially positioned relative to their normal position, but they become fixed to the viewport when they reach a certain scroll position. Sticky positioning is a hybrid of relative and fixed positioning and is useful for creating sticky headers or sidebars that scroll with the content until they reach a threshold, then stick to the top or side of the viewport.  For `relative`, `absolute`, `fixed`, and `sticky` positioned elements, you can use the offset properties `top`, `right`, `bottom`, and `left` to specify their position. The `z-index` property controls the stacking order of positioned elements along the z-axis (depth), determining which elements appear in front or behind others when they overlap. Understanding CSS positioning is crucial for creating complex layouts, overlays, sticky elements, and precise element placement on web pages.",
      "example": ".positioned-box {\n  position: relative;\n  width: 150px;\n  height: 100px;\n  background-color: #ff6f61;\n}\n\n.absolute-box {\n  position: absolute;\n  top: 30px;\n  left: 30px;\n  background-color: #6a4c93;\n  color: white;\n  padding: 1rem;\n}",
      "previewHtml": "<div class='positioned-box'>\n  Relative Parent\n  <div class='absolute-box'>Absolute Child</div>\n</div>",
      "practice": [
        "Create a sticky header that stays at the top of the viewport",
        "Implement a tooltip that appears on hover using absolute positioning",
        "Overlay text on an image using relative and absolute positioning"
      ],
      "quiz": [
        {
          "question": "What is the default value of the 'position' property?",
          "options": ["relative", "absolute", "fixed", "static"],
          "correctAnswer": 3
        },
        {
          "question": "Which position value removes an element from the normal document flow?",
          "options": ["relative", "fixed", "sticky", "static"],
          "correctAnswer": 1
        },
        {
          "question": "A 'relative' positioned element is positioned relative to:",
          "options": ["The viewport", "Its parent element", "The nearest positioned ancestor", "Its normal position"],
          "correctAnswer": 3
        },
        {
          "question": "An 'absolute' positioned element is positioned relative to:",
          "options": ["The viewport", "Its parent element", "The nearest positioned ancestor", "Its normal position"],
          "correctAnswer": 2
        },
        {
          "question": "What is the behavior of a 'fixed' positioned element when the page is scrolled?",
          "options": ["It scrolls with the page content.", "It remains fixed in the viewport.", "It becomes 'static' after scrolling.", "It disappears after scrolling."],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".container-pos {\n  position: relative;\n  height: 200px;\n  background-color: #f0f0f0;\n}\n\n.movable-box {\n  position: absolute;\n  background-color: lightcoral;\n  width: 50px;\n  height: 50px;\n  /* Try changing top, bottom, left, right values */\n  top: 20px;\n  left: 20px;\n}",
          "result": "Experiment with CSS positioning values"
        },
        {
          "code": ".sticky-header {\n  position: sticky;\n  top: 0;\n  background-color: lightblue;\n  padding: 1rem;\n  z-index: 100;\n}\n\n.content-scrollable {\n  height: 500px;\n  overflow-y: scroll;\n  padding-top: 50px; /* To make space for sticky header */\n}",
          "result": "A sticky header that stays at the top during scrolling"
        },
        {
          "code": ".image-container-overlay {\n  position: relative;\n  display: inline-block;\n}\n\n.image-overlay-text {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 1rem;\n  text-align: center;\n}",
          "result": "Overlaying text on an image using relative and absolute positioning"
        }
      ],
      "keyPoints": [
        "Position types: `static` (default), `relative`, `absolute`, `fixed`, `sticky`.",
        "`relative` positioning is relative to the element's normal position; `absolute` is relative to the nearest positioned ancestor; `fixed` is relative to the viewport; `sticky` is a hybrid.",
        "`static` positioned elements are not affected by offset properties (`top`, `right`, `bottom`, `left`) or `z-index`.",
        "Offset properties (`top`, `right`, `bottom`, `left`) are used to adjust the position of `relative`, `absolute`, `fixed`, and `sticky` positioned elements.",
        "`z-index` controls the stacking order of positioned elements, with higher values appearing in front.",
        "Understanding stacking context is important for managing overlapping positioned elements.",
        "CSS positioning is essential for creating complex layouts, overlays, sticky elements, and precise element placement."
      ]
    },
    {
      "id": "css-specificity-inheritance",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Specificity & Inheritance",
      "description": "Understand CSS specificity and inheritance to resolve style conflicts and streamline stylesheets",
      "difficulty": "intermediate",
      "explanation": "CSS Specificity and Inheritance are two core mechanisms that determine how styles are applied to HTML elements, particularly when multiple CSS rules target the same element, or when styles are passed down through the DOM tree. Understanding these concepts is crucial for writing maintainable and predictable CSS.  **CSS Specificity** is the set of rules that browsers use to determine which CSS rule has the most weight and should be applied when multiple conflicting rules target the same element. Specificity is calculated based on the types of selectors used in a CSS rule. The specificity hierarchy, from highest to lowest, is generally as follows:  1. **Inline styles**: Styles directly applied to an HTML element using the `style` attribute have the highest specificity. 2. **IDs**: ID selectors (`#id-name`) are more specific than class selectors, attribute selectors, and pseudo-classes. 3. **Classes, attribute selectors, and pseudo-classes**: Class selectors (`.class-name`), attribute selectors (`[attribute]`, `[attribute='value']`), and pseudo-classes (`:hover`, `:focus`, `:nth-child()`) have equal specificity. 4. **Element selectors and pseudo-elements**: Element selectors (e.g., `p`, `div`) and pseudo-elements (`::before`, `::after`) have the lowest specificity. 5. **Universal selector (`*`) and combinators**: These have no specificity value themselves but contribute to the overall selector when combined with other selectors.  The `!important` declaration overrides all normal specificity calculations. A rule with `!important` will always be applied regardless of specificity, except when overridden by another `!important` rule with higher specificity or later in the stylesheet.  **CSS Inheritance** is the mechanism by which certain CSS properties are passed down from parent elements to their child elements. Not all CSS properties are inherited; common inherited properties include `color`, `font-family`, `font-size`, `text-align`, and `line-height`. Properties like `border`, `margin`, `padding`, and `background-color` are not inherited.  Inheritance simplifies CSS by allowing you to set styles on parent elements that cascade down to their descendants, maintaining consistency and reducing redundancy in your stylesheets. However, you can always override inherited styles by applying more specific rules directly to child elements.",
      "example": "/* Specificity */\nbody {\n  color: blue; /* Low specificity */\n}\n\np {\n  color: green; /* Higher specificity than body */\n}\n\n.text-class {\n  color: orange !important; /* Highest specificity due to !important */\n}\n\n/* Inheritance */\n.parent {\n  font-family: Arial, sans-serif;\n}\n\n/* <p> will inherit font-family from .parent */",
      "previewHtml": "<div class='parent' style='padding: 20px; background-color: #eee;'>\n  <p style='color: green;'>This text is green due to element selector, but font is inherited.</p>\n  <p class='text-class'>This text is orange and font is inherited.</p>\n</div>",
      "practice": [
        "Debug style conflicts by analyzing selector specificity",
        "Override inherited styles with more specific rules",
        "Use inheritance effectively to reduce CSS code"
      ],
      "quiz": [
        {
          "question": "Which selector type has higher specificity: class or ID?",
          "options": ["Class", "ID", "Element", "Attribute"],
          "correctAnswer": 1
        },
        {
          "question": "What does '!important' declaration do?",
          "options": ["Lowers selector specificity", "Increases selector specificity to the highest level", "Has no effect on specificity", "Only applies to animations"],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS property is NOT typically inherited?",
          "options": ["color", "font-size", "text-align", "border-width"],
          "correctAnswer": 3
        },
        {
          "question": "Which of the following selectors has the highest specificity?",
          "options": ["body p", "#header", ".container", "p"],
          "correctAnswer": 1
        },
        {
          "question": "What is the specificity order from highest to lowest?",
          "options": ["Inline styles > ID > Class > Element", "ID > Inline styles > Class > Element", "Element > Class > ID > Inline styles", "Class > ID > Element > Inline styles"],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": "/* Experiment with selectors to see specificity in action */\n#special-text {\n  color: purple;\n}\n\n.text-block {\n  color: teal;\n}\n\np#special-text.text-block {\n  color: red; /* Try changing this and see the effect */\n}",
          "result": "Demonstrating CSS specificity rules"
        },
        {
          "code": ".parent-font {\n  font-family: 'Courier New', monospace;\n}\n\n.child-text {\n  color: orange;\n  /* font-family is inherited from .parent-font */\n}\n\n/* Override inherited font-family */\n.child-text-override {\n  font-family: Arial, sans-serif !important;\n}",
          "result": "Demonstrating CSS inheritance and overriding inherited styles"
        },
        {
          "code": "/* Example with !important */\n.important-style {\n  color: blue !important;\n}\n\n.less-important-style {\n  color: green;\n}\n\n/* Even though .less-important-style is defined later, .important-style takes precedence */",
          "result": "Illustrating the effect of '!important' on specificity"
        }
      ],
      "keyPoints": [
        "Specificity hierarchy determines which CSS rule wins in conflicts: Inline styles > ID > Class/Attribute/Pseudo-class > Element.",
        "`!important` declaration increases specificity to the highest level, overriding most other rules.",
        "CSS Inheritance allows certain properties to be passed down from parent to child elements, simplifying styling.",
        "Understanding specificity is crucial for debugging CSS and resolving style conflicts.",
        "Use specificity strategically to manage styles effectively and avoid overusing `!important`.",
        "Leverage inheritance to reduce CSS code and maintain style consistency across your website.",
        "Specificity calculation involves counting selectors of each type and applying a weighting system."
      ]
    },
    {
      "id": "css-media-queries",
      "technology": "css",
      "category": "responsive",
      "title": "CSS Media Queries",
      "description": "Implement responsive design using CSS media queries to adapt styles to different devices",
      "difficulty": "intermediate",
      "explanation": "CSS Media Queries are a cornerstone of Responsive Web Design, enabling you to apply different styles based on various characteristics of the device or screen viewing the webpage. They are essential for creating websites that adapt gracefully to different screen sizes, resolutions, orientations (portrait/landscape), and even input types (touch/mouse). Media queries allow you to create a single website that provides an optimal viewing experience across a diverse range of devices.  A media query consists of a **media type** (e.g., `screen`, `print`, `all`) and one or more **media features** that test for specific conditions. Media features are enclosed in parentheses and can include:  * `width` and `height`: Viewport width and height.  * `min-width`, `max-width`, `min-height`, `max-height`: Minimum and maximum viewport dimensions.  * `orientation`: Device orientation (`portrait` or `landscape`).  * `resolution`: Screen resolution (e.g., `dpi`, `dpcm`, `dppx`).  * `aspect-ratio`: Viewport aspect ratio.  * `device-width`, `device-height`: Device screen width and height (less commonly used now).  * `pointer`: Input pointer type (`coarse`, `fine`, `none`).  * `hover`: Ability to hover (`hover`, `none`).  You can combine multiple media features using logical operators:  * `and`: Requires all conditions to be true. * `or` (comma-separated): Requires at least one condition to be true. * `not`: Negates the media query. * `only`: Prevents older browsers from applying the styles.  Media queries are applied using the `@media` rule in CSS. Styles defined within a media query block are only applied when the specified conditions are met. Common use cases for media queries include:  * Adapting layout for different screen sizes (e.g., changing from a multi-column layout on desktop to a single-column layout on mobile).  * Adjusting font sizes for readability on smaller screens.  * Hiding or showing elements based on device type or screen size.  * Optimizing images and content delivery for different network conditions.  * Applying specific styles for print or other media types.  Effective use of media queries is crucial for creating responsive and accessible websites that cater to a wide range of users and devices.",
      "example": "/* Default styles for larger screens */\n.container-mq {\n  display: flex;\n}\n\n.box-mq {\n  width: 30%;\n}\n\n/* Media query for smaller screens (e.g., mobile) */\n@media (max-width: 768px) {\n  .container-mq {\n    flex-direction: column;\n  }\n\n  .box-mq {\n    width: 100%;\n  }\n\n  .header {\n    font-size: 1.5rem;\n  }\n}",
      "previewHtml": "<div class='container-mq' style='background-color: #f0f0f0; padding: 1rem;'>\n  <div class='box-mq' style='background-color: lightblue; padding: 1rem; margin: 0.5rem;'>Box 1</div>\n  <div class='box-mq' style='background-color: lightcoral; padding: 1rem; margin: 0.5rem;'>Box 2</div>\n</div>",
      "practice": [
        "Design a navigation bar that collapses into a hamburger menu on smaller screens",
        "Create a responsive grid layout that changes column count based on screen width",
        "Adjust font sizes and spacing for mobile and desktop views"
      ],
      "quiz": [
        {
          "question": "What is the primary purpose of CSS media queries?",
          "options": ["To animate elements", "To create conditional styles based on device characteristics", "To define CSS variables", "To perform calculations in CSS"],
          "correctAnswer": 1
        },
        {
          "question": "Which media feature is commonly used to target different screen widths?",
          "options": ["orientation", "resolution", "max-width", "aspect-ratio"],
          "correctAnswer": 2
        },
        {
          "question": "What does 'min-width' media feature specify?",
          "options": ["Maximum screen width", "Minimum screen width", "Exact screen width", "Screen height"],
          "correctAnswer": 1
        },
        {
          "question": "Which media type is used to apply styles for screens?",
          "options": ["print", "screen", "all", "tv"],
          "correctAnswer": 1
        },
        {
          "question": "How do you combine multiple media features in a media query to require all conditions to be true?",
          "options": ["Using a comma ','", "Using 'or'", "Using 'and'", "Using 'not'"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": "/* Try changing the max-width value and observe the changes */\nbody {\n  font-size: 16px;\n}\n\n@media (max-width: 600px) {\n  body {\n    font-size: 14px; /* Smaller font for smaller screens */\n  }\n}",
          "result": "Font size changes based on screen width"
        },
        {
          "code": ".responsive-image {\n  max-width: 100%;\n  height: auto;\n}\n\n.image-container-responsive {\n  overflow: hidden; /* To contain the image */\n}\n\n@media (max-width: 768px) {\n  .image-container-responsive {\n    width: 90%; /* Adjust container width on smaller screens */\n    margin: 0 auto; /* Center container */\n  }\n}",
          "result": "Responsive image scaling and container adjustments using media queries"
        },
        {
          "code": ".navigation-responsive {\n  display: flex;\n  justify-content: space-around;\n}\n\n@media (max-width: 768px) {\n  .navigation-responsive {\n    flex-direction: column; /* Stack navigation items on mobile */\n    align-items: center;\n  }\n\n  .navigation-responsive a {\n    margin-bottom: 1rem;\n  }\n}",
          "result": "Responsive navigation menu adapting to mobile screens by stacking items"
        }
      ],
      "keyPoints": [
        "Apply styles conditionally based on device and screen characteristics.",
        "Media queries consist of a media type and media features.",
        "Common media features include `width`, `height`, `orientation`, `resolution`, `pointer`, and `hover`.",
        "Use `@media` rule to apply media queries in CSS.",
        "Combine media features using `and`, `or` (comma), and `not` operators.",
        "`max-width` and `min-width` are frequently used for responsive breakpoints.",
        "Media queries are essential for creating device-agnostic and user-friendly web designs."
      ]
    },
    {
      "id": "css-filters",
      "technology": "css",
      "category": "effects",
      "title": "CSS Filters",
      "description": "Apply visual effects like blur, grayscale, and brightness to elements using CSS filters",
      "difficulty": "intermediate",
      "explanation": "CSS Filters provide a powerful way to apply graphical effects directly to HTML elements using CSS, similar to image editing software like Photoshop. They allow you to alter the visual appearance of elements in various ways, enhancing visual appeal and creating unique effects without needing to manipulate images externally or use JavaScript for many common visual adjustments. CSS filters are hardware-accelerated by browsers, making them performant for enhancing visual elements.  The `filter` CSS property is used to apply one or more filter functions to an element. Common filter functions include:  * `blur(radius)`: Applies a blur effect to the element.  * `brightness(percentage)`: Adjusts the brightness of the element.  * `contrast(percentage)`: Adjusts the contrast.  * `grayscale(percentage)`: Converts the element to grayscale.  * `sepia(percentage)`: Applies a sepia tone.  * `hue-rotate(angle)`: Rotates the hue of the element.  * `invert(percentage)`: Inverts the colors.  * `opacity(percentage)`: Adjusts the opacity (transparency).  * `saturate(percentage)`: Adjusts color saturation.  * `drop-shadow(offsetX offsetY blurRadius color)`: Adds a drop shadow to the element's image.  You can apply multiple filters to an element by listing them separated by spaces in the `filter` property value. Filters are applied in the order they are listed. CSS filters are versatile and can be used for various purposes, including:  * Image adjustments: Easily adjust brightness, contrast, saturation, or apply grayscale to images directly in CSS.  * Visual effects: Create blur effects, sepia tones, color inversions, and hue shifts.  * Hover effects: Apply filters on hover to provide visual feedback and interactivity.  * Accessibility enhancements: Use filters to improve color contrast or readability for users with visual impairments.  * Artistic effects: Combine filters to create complex and unique visual styles.  CSS filters offer a performant and declarative way to enhance the visual presentation of web content, making it more engaging and visually appealing.",
      "example": ".filter-image {\n  filter: grayscale(80%) blur(5px);\n  transition: filter 0.3s ease-in-out;\n}\n\n.filter-image:hover {\n  filter: grayscale(0%) blur(0px);\n}",
      "previewHtml": "<img class='filter-image' src='placeholder-image.jpg' alt='Filtered Image' style='width: 200px;'>\n<!-- Replace placeholder-image.jpg with an actual image URL -->",
      "practice": [
        "Create a hover effect that desaturates an image",
        "Apply a blur effect to a background image",
        "Use brightness and contrast filters to adjust image appearance"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to apply visual effects like blur and grayscale?",
          "options": ["effect", "visual-effect", "filter", "transform"],
          "correctAnswer": 2
        },
        {
          "question": "What does the 'blur()' filter function do?",
          "options": ["Sharpens an image", "Blurs an image", "Changes image color", "Adjusts image brightness"],
          "correctAnswer": 1
        },
        {
          "question": "Which filter function converts an image to grayscale?",
          "options": ["sepia()", "contrast()", "grayscale()", "brightness()"],
          "correctAnswer": 2
        },
        {
          "question": "Can you apply multiple filters to a single element?",
          "options": ["No, only one filter is allowed per element.", "Yes, by listing them separated by commas.", "Yes, by listing them separated by spaces.", "Only with JavaScript."],
          "correctAnswer": 2
        },
        {
          "question": "Are CSS filters hardware-accelerated?",
          "options": ["No, they are software-rendered.", "Yes, by modern browsers.", "Only some filters are hardware-accelerated.", "It depends on the device."],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-filter {\n  width: 150px;\n  height: 150px;\n  background-color: #8e44ad;\n  /* Try different filter functions and values */\n  filter: brightness(150%) contrast(120%);\n  transition: filter 0.3s ease;\n}\n\n.interactive-filter:hover {\n  filter: brightness(100%) contrast(100%);\n}",
          "result": "Element with interactive CSS filters on hover"
        },
        {
          "code": ".blur-background-image {\n  background-image: url('background-image.jpg'); /* Replace with image URL */\n  background-size: cover;\n  height: 200px;\n  filter: blur(8px);\n  /* To place text over blurred background, use absolute positioning */\n  position: relative;\n}\n\n.text-over-blur {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  font-size: 2rem;\n}",
          "result": "Blurred background image with text overlay"
        },
        {
          "code": ".grayscale-hover-image {\n  width: 200px;\n  transition: filter 0.3s ease-in-out;\n}\n\n.grayscale-hover-image:hover {\n  filter: grayscale(100%);\n}",
          "result": "Image that transitions to grayscale on hover"
        }
      ],
      "keyPoints": [
        "Apply visual effects like blur, grayscale, brightness, contrast, sepia, hue-rotate, etc. directly in CSS.",
        "Filter functions include `blur()`, `grayscale()`, `brightness()`, `contrast()`, `sepia()`, `hue-rotate()`, `invert()`, `opacity()`, `saturate()`, `drop-shadow()`.",
        "CSS Filters are hardware-accelerated, providing good performance.",
        "Enhance images and elements visually without external image editing or JavaScript for many effects.",
        "Filters can be combined to create complex visual styles.",
        "Useful for image adjustments, hover effects, accessibility enhancements, and artistic styles.",
        "The `filter` property accepts a space-separated list of filter functions."
      ]
    },
    {
      "id": "css-units",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Units",
      "description": "Understand and use different CSS units for flexible and responsive sizing",
      "difficulty": "beginner",
      "explanation": "CSS Units are essential for defining sizes and lengths in stylesheets, controlling the dimensions of elements, font sizes, margins, paddings, and more. Choosing the right units is crucial for creating flexible, responsive, and accessible websites. CSS units are broadly categorized into two types: **Absolute Units** and **Relative Units**.  **Absolute Units**:  Represent fixed physical measurements, which are generally consistent across different environments. However, in web development, their actual physical size can vary based on screen resolution and device settings.  * `px` (pixels): The most common absolute unit, representing device pixels. While seemingly fixed, the physical size of a pixel can vary, especially on high-resolution displays.  * `pt` (points): Traditionally used in print media (1pt = 1/72 of an inch). Less common for screen-based CSS.  * `pc` (picas): Another print-related unit (1pc = 12 points).  * `in` (inches), `cm` (centimeters), `mm` (millimeters): Physical length units. Generally less practical for responsive web design due to screen variability.  **Relative Units**:  Are defined relative to something else, like the font size of a parent element, the root element's font size, or the viewport dimensions. They are key for responsive design because they allow sizes to scale proportionally.  * `em`: Relative to the font size of the *parent* element. For example, if the parent element has `font-size: 16px;`, then `1em` in a child element will also be `16px`. If the child element has `font-size: 2em;`, it will be `32px` (2 * 16px).  * `rem` (root em): Relative to the font size of the *root* element (`<html>` element). This makes `rem` units more predictable and easier to manage for overall site typography, as `1rem` always refers to the root font size, regardless of element nesting.  * `%` (percentage): Relative to the parent element's dimension (width or height, depending on the property).  * **Viewport Units**: Relative to the dimensions of the viewport (browser window).  * `vw` (viewport width): `1vw` is equal to 1% of the viewport width.  * `vh` (viewport height): `1vh` is equal to 1% of the viewport height.  * `vmin` (viewport minimum): `1vmin` is equal to 1% of the smaller dimension (width or height) of the viewport.  * `vmax` (viewport maximum): `1vmax` is equal to 1% of the larger dimension (width or height) of the viewport.  Choosing between absolute and relative units depends on the design goal. Pixels (`px`) are often used for borders and fine-tuning element sizes. Relative units (`em`, `rem`, `vw`, `vh`, %) are crucial for responsive layouts, scalable typography, and creating websites that adapt well to different screen sizes and user font settings. Using `rem` for font sizes and viewport units for layout dimensions is a common best practice in modern web development for creating accessible and responsive designs.",
      "example": ".unit-box {\n  width: 50%; /* Relative width based on parent */\n  height: 200px; /* Absolute height in pixels */\n  font-size: 1.2rem; /* Relative font size based on root element */\n  padding: 1em; /* Relative padding based on element's font size */\n  margin-bottom: 2vh; /* Relative margin based on viewport height */\n}",
      "previewHtml": "<div class='unit-box' style='background-color: #e74c3c; color: white;'>\n  Box with different CSS units\n</div>",
      "practice": [
        "Design layouts using percentages for responsive widths",
        "Set font sizes using 'rem' for accessibility and scalability",
        "Experiment with viewport units ('vw', 'vh') for full-screen elements"
      ],
      "quiz": [
        {
          "question": "Which of the following is an absolute CSS unit?",
          "options": ["em", "rem", "px", "vw"],
          "correctAnswer": 2
        },
        {
          "question": "What does 'rem' unit stand for?",
          "options": ["Relative element margin", "Root em", "Relative em", "Responsive measurement"],
          "correctAnswer": 1
        },
        {
          "question": "Which unit is relative to the viewport's width?",
          "options": ["em", "vh", "rem", "vw"],
          "correctAnswer": 3
        },
        {
          "question": "If the root font size is 16px, what is the computed font size of an element with `font-size: 1.5rem;`?",
          "options": ["16px", "20px", "24px", "32px"],
          "correctAnswer": 2
        },
        {
          "question": "Which unit is generally recommended for setting font sizes for better accessibility and scalability?",
          "options": ["px", "pt", "em", "rem"],
          "correctAnswer": 3
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-units {\n  width: 80vw; /* Viewport width unit */\n  height: 10vh; /* Viewport height unit */\n  background-color: #34495e;\n  color: white;\n  /* Try changing units and values */\n  font-size: 2em;\n}",
          "result": "Element sized using viewport and 'em' units"
        },
        {
          "code": ".percentage-width-box {\n  width: 50%; /* 50% width of parent */\n  background-color: lightgreen;\n  height: 80px;\n}",
          "result": "Element with width set as a percentage of its parent"
        },
        {
          "code": ":root {\n  font-size: 16px; /* Root font size */\n}\n\n.rem-font-size-example {\n  font-size: 1.2rem; /* 1.2 times root font size */\n  background-color: lightyellow;\n  padding: 1rem;\n}",
          "result": "Font size set using 'rem' unit relative to the root font size"
        }
      ],
      "keyPoints": [
        "Absolute units (px, pt, pc, in, cm, mm) define fixed sizes.",
        "Relative units (em, rem, %, vw, vh, vmin, vmax) provide flexible and scalable sizing.",
        "`rem` units are relative to the root element's font size, making them predictable for site-wide typography.",
        "`em` units are relative to the parent element's font size, which can lead to compounding effects.",
        "Viewport units (vw, vh, vmin, vmax) are relative to the viewport dimensions, ideal for full-screen layouts and responsive scaling.",
        "Percentages (%) are relative to the parent element's dimensions.",
        "Use relative units for responsive and scalable designs, especially for font sizes and layout dimensions.",
        "Choose units based on the specific design goal: absolute for fixed sizes, relative for flexibility and responsiveness."
      ]
    },
    {
      "id": "css-pseudo-elements",
      "technology": "css",
      "category": "selectors",
      "title": "CSS Pseudo-elements",
      "description": "Style specific parts of an element using CSS pseudo-elements like ::before and ::after",
      "difficulty": "intermediate",
      "explanation": "CSS Pseudo-elements are powerful tools that allow you to style specific parts of an element, rather than the entire element as a whole. They enable you to target and style virtual elements that are not explicitly present in the HTML markup, enhancing visual design and layout without altering the document structure. Common pseudo-elements include:  * `::before`: Creates a pseudo-element that is the *first child* of the selected element. It's typically used to insert content before the element's actual content. * `::after`: Creates a pseudo-element that is the *last child* of the selected element. Used to insert content after the element's content. * `::first-line`: Styles the first formatted line of text in a block-level element. * `::first-letter`: Styles the first letter of the first line of text in a block-level element. * `::marker`: Styles the bullet or number marker of list items (`<li>`). * `::selection`: Styles the portion of an element that is selected by the user (e.g., highlighted text). * `::placeholder`: Styles the placeholder text in form input elements (`<input>`, `<textarea>`).  For `::before` and `::after` pseudo-elements, the `content` property is *essential*. It specifies what, if anything, should be inserted into the pseudo-element. It can be text, an image URL, or even left empty (`content: '';`) if you are only using the pseudo-element for decorative purposes like adding borders or background styles. Pseudo-elements are denoted by a double colon `::` (though single colon `:` is also often accepted for older pseudo-elements for backward compatibility). They are used in selectors to target these virtual parts of elements and apply CSS styles. Pseudo-elements are incredibly versatile and are used for a wide range of design enhancements, including:  * Adding decorative content like icons, borders, or backgrounds without adding extra HTML elements. * Creating tooltips or labels. * Styling list markers in custom ways. * Enhancing typography with first-letter or first-line styles. * Customizing form placeholder appearance.  Using pseudo-elements effectively can lead to cleaner HTML markup, more semantic CSS, and more creative and flexible design solutions.",
      "example": ".pseudo-element-box {\n  position: relative;\n  padding: 1rem;\n  background-color: #f39c12;\n  color: white;\n}\n\n.pseudo-element-box::before {\n  content: '';\n  position: absolute;\n  top: -10px;\n  left: -10px;\n  border: 5px solid #d68910;\n  width: calc(100% + 20px);\n  height: calc(100% + 20px);\n  z-index: -1;\n}",
      "previewHtml": "<div class='pseudo-element-box'>\n  Box with ::before pseudo-element\n</div>",
      "practice": [
        "Add decorative borders or backgrounds using ::before and ::after",
        "Create tooltips or labels with pseudo-elements for extra content",
        "Implement custom bullet points in lists using ::before"
      ],
      "quiz": [
        {
          "question": "Which pseudo-element is used to insert content before the content of an element?",
          "options": ["::after", "::before", ":before", ":after"],
          "correctAnswer": 1
        },
        {
          "question": "What property is essential to include when using ::before or ::after to display content?",
          "options": ["display", "content", "visibility", "position"],
          "correctAnswer": 1
        },
        {
          "question": "Are pseudo-elements part of the actual DOM?",
          "options": ["Yes", "No", "Sometimes", "Only in shadow DOM"],
          "correctAnswer": 1
        },
        {
          "question": "Which pseudo-element styles the first line of text in an element?",
          "options": ["::first-letter", "::first-line", "::line-first", "::initial-line"],
          "correctAnswer": 1
        },
        {
          "question": "Which pseudo-element is used to style the bullet points in a list?",
          "options": ["::list-bullet", "::list-marker", "::marker", "::bullet"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-pseudo::after {\n  content: '✨';\n  margin-left: 5px;\n  /* Try changing content or styles */\n}\n\n.interactive-pseudo {\n  background-color: #27ae60;\n  color: white;\n  padding: 0.5rem;\n  display: inline-block;\n}",
          "result": "Element with ::after pseudo-element adding an emoji"
        },
        {
          "code": ".tooltip-container {\n  position: relative;\n  display: inline-block;\n}\n\n.tooltip-container::after {\n  content: 'This is a tooltip!';\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: black;\n  color: white;\n  padding: 0.5rem;\n  border-radius: 4px;\n  visibility: hidden;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.tooltip-container:hover::after {\n  visibility: visible;\n  opacity: 1;\n}",
          "result": "Tooltip created using ::after pseudo-element and hover effect"
        },
        {
          "code": ".custom-list li::marker {\n  color: blue;\n  font-size: 1.2em;\n}",
          "result": "Customizing list item markers using ::marker pseudo-element"
        }
      ],
      "keyPoints": [
        "Pseudo-elements style specific parts of elements, not whole elements.",
        "Common pseudo-elements are `::before`, `::after`, `::first-line`, `::first-letter`, `::marker`, `::selection`, `::placeholder`.",
        "`::before` and `::after` are used to insert generated content before or after an element's content, requiring the `content` property.",
        "Pseudo-elements enhance UI without altering the HTML structure, leading to cleaner and more semantic code.",
        "They are not part of the DOM tree itself but are rendered as if they were.",
        "Pseudo-elements are versatile for decorative elements, tooltips, typography enhancements, and form styling."
      ]
    },
    {
      "id": "css-text-styling",
      "technology": "css",
      "category": "styling",
      "title": "CSS Text Styling",
      "description": "Control the appearance of text using CSS properties for font, size, alignment, and more",
      "difficulty": "beginner",
      "explanation": "CSS Text Styling properties are essential for controlling the visual presentation of text content on web pages. Proper text styling is crucial for readability, visual hierarchy, and overall design aesthetics. CSS offers a wide range of properties to customize text appearance, broadly categorized as:  **Font Properties**:  * `font-family`: Specifies the typeface to be used for the text. You can provide a list of font families as fallback options in case the primary font is not available. * `font-size`: Sets the size of the font. Relative units like `rem` and `em` are recommended for accessibility and responsiveness. * `font-weight`: Controls the boldness of the text (`normal`, `bold`, `lighter`, `bolder`, or numeric values from 100 to 900). * `font-style`: Sets the font style (`normal`, `italic`, `oblique`). * `font-variant`: Allows for variant glyphs to be used, like small caps (`normal`, `small-caps`). * `line-height`: Sets the vertical space between lines of text, improving readability by controlling line spacing.  **Text Decoration & Effects**:  * `text-decoration`: Adds decorations to text, such as underlines, overlines, and line-throughs (`none`, `underline`, `overline`, `line-through`, and combinations). * `text-decoration-color`, `text-decoration-style`, `text-decoration-thickness`: Customize the appearance of text decorations. * `text-shadow`: Adds shadow effects to text, creating depth or emphasis. * `text-transform`: Transforms text case (`none`, `uppercase`, `lowercase`, `capitalize`). * `letter-spacing`: Adjusts the space between letters. * `word-spacing`: Adjusts the space between words.  **Text Alignment & Spacing**:  * `text-align`: Sets the horizontal alignment of text within its container (`left`, `right`, `center`, `justify`). * `vertical-align`: Sets the vertical alignment of an inline or table-cell box. * `text-indent`: Specifies the indentation of the first line of text in a block. * `white-space`: Controls how whitespace within an element is handled (`normal`, `nowrap`, `pre`, `pre-line`, `pre-wrap`).  **Color & Opacity**:  * `color`: Sets the text color. * `opacity`: Controls the overall transparency of the text.  **Other Text Properties**:  * `direction`: Sets the text direction (`ltr`, `rtl`). * `unicode-bidi`: Used in combination with `direction` to handle bidirectional text (e.g., mixing left-to-right and right-to-left text).  Effective text styling is crucial for creating readable, accessible, and visually appealing web content. Choosing appropriate fonts, sizes, line heights, and colors, and utilizing text effects judiciously, significantly impacts the user experience and the overall design of a website.",
      "example": ".text-style-box {\n  font-family: 'Arial', sans-serif;\n  font-size: 16px;\n  color: #333;\n  line-height: 1.5;\n  text-align: justify;\n  letter-spacing: 0.5px;\n}",
      "previewHtml": "<p class='text-style-box'>\n  This is an example of styled text using CSS properties such as font-family, font-size, line-height, text-align, and letter-spacing.\n</p>",
      "practice": [
        "Style headings with different font families and sizes",
        "Adjust line height for better readability of paragraphs",
        "Experiment with text alignment and letter spacing for visual effects"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to change the font of text?",
          "options": ["text-font", "font-family", "typeface", "text-style"],
          "correctAnswer": 1
        },
        {
          "question": "Which property controls the space between lines of text?",
          "options": ["word-spacing", "line-height", "letter-spacing", "text-spacing"],
          "correctAnswer": 1
        },
        {
          "question": "Which property is used to make text bold?",
          "options": ["font-variant", "text-weight", "font-bold", "font-weight"],
          "correctAnswer": 3
        },
        {
          "question": "Which value of 'text-align' justifies text in both left and right margins?",
          "options": ["left", "right", "center", "justify"],
          "correctAnswer": 3
        },
        {
          "question": "What does 'text-transform: uppercase;' do?",
          "options": ["Changes the font to uppercase.", "Capitalizes the first letter of each word.", "Transforms all text to uppercase.", "Removes text transformation."],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-text {\n  font-family: 'Courier New', monospace;\n  color: #c0392b;\n  /* Try changing font-size, font-weight, text-transform */\n  font-size: 1.2em;\n  text-transform: uppercase;\n}",
          "result": "Text styled with different font properties"
        },
        {
          "code": ".heading-style {\n  font-family: Georgia, serif;\n  font-size: 2rem;\n  font-weight: bold;\n  color: #3498db;\n}\n\n.paragraph-style {\n  font-family: Arial, sans-serif;\n  font-size: 1rem;\n  line-height: 1.6;\n  text-align: left;\n}",
          "result": "Example of styling headings and paragraphs with different text properties"
        },
        {
          "code": ".text-shadow-example-interactive {\n  font-size: 2.5rem;\n  color: white;\n  text-shadow: 3px 3px 5px black;\n  text-align: center;\n}",
          "result": "Text with a text shadow effect for emphasis"
        }
      ],
      "keyPoints": [
        "Key text styling properties include `font-family`, `font-size`, `font-weight`, `color`, `text-align`, `line-height`, `letter-spacing`, `word-spacing`, `text-decoration`, `text-shadow`, and `text-transform`.",
        "Use web-safe fonts or import custom fonts using `@font-face` for consistent typography across browsers.",
        "Ensure good color contrast between text and background for readability and accessibility.",
        "Optimize line height and letter spacing for comfortable reading experience, especially for longer blocks of text.",
        "Use relative units like `rem` and `em` for font sizes to ensure responsiveness and accessibility for users who adjust browser font settings.",
        "Utilize text effects like shadows and decorations judiciously to enhance visual appeal without compromising readability.",
        "Text alignment and spacing properties are crucial for controlling text layout and visual hierarchy."
      ]
    },
    {
      "id": "css-container-queries",
      "technology": "css",
      "category": "responsive",
      "title": "CSS Container Queries",
      "description": "Apply styles based on the size of a container, not just the viewport, using CSS Container Queries",
      "difficulty": "advanced",
      "explanation": "CSS Container Queries (CQ) represent a significant advancement in responsive web design, moving beyond viewport-based breakpoints to enable component-level responsiveness. Unlike media queries, which apply styles based on the overall viewport size, container queries allow you to apply styles to elements based on the size of their *container* element. This means that components can adapt their styling based on the space available to them within a specific part of the layout, making them truly reusable and flexible across different contexts within a website.  To use container queries, you first need to define a **container context** on an ancestor element. This is done using the `container-type` property:  * `container-type: size`: The query is based on the container's inline-size (width in horizontal writing mode) and block-size (height in horizontal writing mode). * `container-type: inline-size`: The query is based only on the container's inline-size (width in horizontal writing mode). * `container-type: normal`: The element is not a query container.  Optionally, you can also give a name to your container using `container-name: myContainerName;`. This name can be used to target specific containers in your queries.  Once a container is defined, you can write container queries using the `@container` at-rule, followed by the container name (if specified) and the media feature conditions (e.g., `max-width`, `min-width`, `inline-size`, `block-size`). Inside the `@container` block, you define the CSS rules that should be applied to elements *within* that container when the conditions are met.  Container queries are particularly useful for:  * Card layouts: Cards can adapt their content layout, padding, and font sizes based on their width within different sections of a page. * Navigation components: Navigation elements can adjust their appearance based on the width of the sidebar or header they are placed in. * Reusable components: Components designed with container queries can be placed in various layouts and will automatically adapt to the available space, enhancing reusability. * Complex layouts: In scenarios where different parts of a page need to respond differently to screen size changes, container queries offer a more granular control than viewport media queries alone.  Container queries enable a more modular and component-driven approach to responsive design, leading to more flexible, maintainable, and reusable web components.",
      "example": ".card-container {\n  container-type: inline-size; /* or 'size' for both inline and block size */\n  container-name: cardArea;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1rem;\n}\n\n.card {\n  padding: 1rem;\n  background-color: #ecf0f1;\n}\n\n@container cardArea (max-width: 400px) {\n  .card {\n    padding: 0.5rem;\n    font-size: 0.9rem;\n  }\n}",
      "previewHtml": "<div class='card-container'>\n  <div class='card'>Card 1 - Content adapts to container width.</div>\n  <div class='card'>Card 2 - Content adapts to container width.</div>\n</div>",
      "practice": [
        "Create cards that change layout or style based on the width of their container",
        "Design a sidebar component that adapts its content based on available space",
        "Implement responsive typography within components using container queries"
      ],
      "quiz": [
        {
          "question": "What is the primary difference between media queries and container queries?",
          "options": ["Media queries are for animations, container queries for layout", "Media queries are based on viewport, container queries on container size", "Container queries are older than media queries", "There is no difference"],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS property is used to define an element as a query container?",
          "options": ["container-query", "query-container", "container-type", "cq-type"],
          "correctAnswer": 2
        },
        {
          "question": "What does 'container-type: inline-size;' mean?",
          "options": ["Queries based on container's height", "Queries based on container's width", "Queries based on both width and height", "Queries based on content size"],
          "correctAnswer": 1
        },
        {
          "question": "Which at-rule is used to define styles within a container query?",
          "options": ["@media", "@container", "@supports", "@viewport"],
          "correctAnswer": 1
        },
        {
          "question": "What is the main benefit of container queries for component-based design?",
          "options": ["Improved performance", "Enhanced browser compatibility", "Increased component reusability and flexibility", "Simplified CSS syntax"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".cq-example-container {\n  container-type: inline-size;\n  container-name: exampleContainer;\n  width: 500px; /* Try changing container width */\n  border: 1px solid black;\n  padding: 1rem;\n}\n\n.cq-example-text {\n  font-size: 1rem;\n}\n\n@container exampleContainer (max-width: 300px) {\n  .cq-example-text {\n    font-size: 0.8rem; /* Smaller font in smaller container */\n  }\n}",
          "result": "Text size adapts based on container width using container queries"
        },
        {
          "code": ".card-cq-container {\n  container-type: inline-size;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.card-cq {\n  flex: 1 1 300px;\n  padding: 1.5rem;\n  background-color: #f0f0f0;\n  border-radius: 8px;\n}\n\n@container card-cq-container (max-width: 600px) {\n  .card-cq {\n    flex-basis: 100%; /* Full width on smaller containers */\n  }\n}",
          "result": "Card layout adapting to container width, becoming full-width in smaller containers"
        },
        {
          "code": ".responsive-typography-cq {\n  container-type: inline-size;\n}\n\n.cq-heading {\n  font-size: 2rem;\n}\n\n@container responsive-typography-cq (max-width: 400px) {\n  .cq-heading {\n    font-size: 1.5rem; /* Smaller heading in narrower containers */\n  }\n}",
          "result": "Responsive typography within a container using container queries to adjust font size"
        }
      ],
      "keyPoints": [
        "Styles are applied based on container size, not just the viewport.",
        "Enable component-level responsiveness, making components more reusable and flexible.",
        "Use `container-type` to define an element as a query container (`size`, `inline-size`).",
        "Use `@container` at-rule to define container queries, targeting containers by name or type.",
        "Container queries are ideal for component-driven design systems and complex layouts where different parts of the page need to respond independently.",
        "They offer a more granular and modular approach to responsiveness compared to viewport media queries alone.",
        "Container queries represent a modern and powerful technique for building adaptable and reusable web components."
      ]
    },
    {
      "id": "css-blend-modes",
      "technology": "css",
      "category": "effects",
      "title": "CSS Blend Modes",
      "description": "Create advanced visual effects by blending colors of elements and backgrounds using CSS blend modes",
      "difficulty": "intermediate",
      "explanation": "CSS Blend Modes are a powerful set of properties that allow you to control how an element's content blends with its background and the content of elements behind it. They enable the creation of sophisticated visual effects, similar to blend modes in image editing software like Photoshop or Sketch, directly within CSS. CSS offers two main types of blend modes:  **Mix Blend Modes**: Controlled by the `mix-blend-mode` property, these determine how an element's content (text, images, background) blends with the content of the element *behind* it (its parent or sibling elements in the stacking order).  **Background Blend Modes**: Controlled by the `background-blend-mode` property, these define how an element's background images blend with each other and with the background color of the element itself.  Common blend modes include:  * `normal`: Default blend mode, no blending is applied. * `multiply`: Darkens colors by multiplying the colors of the element and the background. * `screen`: Lightens colors, the opposite of multiply. * `overlay`: Multiplies or screens colors depending on the background color (darkens dark colors, lightens light colors). * `darken`: Keeps the darker of the base and source colors. * `lighten`: Keeps the lighter of the base and source colors. * `color-dodge`: Lightens the base color to reflect the source color. * `color-burn`: Darkens the base color to reflect the source color. * `hard-light`: Multiplies or screens colors depending on the source color (like overlay but more intense). * `soft-light`: Darkens or lightens colors depending on the source color (softer than hard-light). * `difference`: Subtracts the darker of the two constituent colors from the lighter color. * `exclusion`: Similar to difference but with lower contrast. * `hue`: Uses the hue of the source color with the saturation and luminosity of the base color. * `saturation`: Uses the saturation of the source color with the hue and luminosity of the base color. * `color`: Uses the hue and saturation of the source color with the luminosity of the base color. * `luminosity`: Uses the luminosity of the source color with the hue and saturation of the base color.  CSS Blend Modes are versatile and can be used for creating:  * Artistic image effects: Apply blend modes to images for duotone effects, color overlays, or to blend images seamlessly with their backgrounds. * Text effects: Blend text with background images or colors for unique typography styles. * Visual hierarchy: Use blend modes to subtly highlight or de-emphasize certain elements. * Interface enhancements: Create visually interesting hover effects or state changes using blend modes.  Experimenting with different blend modes and combinations of `mix-blend-mode` and `background-blend-mode` opens up a wide range of creative possibilities for visual design in CSS.",
      "example": ".blend-mode-box {\n  width: 200px;\n  height: 200px;\n  background-color: #3498db;\n  mix-blend-mode: lighten; /* Try different blend modes like 'multiply', 'screen', 'overlay' */\n  color: white;\n  padding: 2rem;\n  background-image: url('pattern.png'); /* Replace with pattern image URL */\n  background-blend-mode: overlay;\n}",
      "previewHtml": "<div class='blend-mode-box'>\n  Blend Mode Effect\n</div>\n<!-- Ensure you have a 'pattern.png' or replace with a valid image URL -->",
      "practice": [
        "Apply blend modes to images for artistic effects",
        "Use blend modes to create color overlays or duotone effects",
        "Experiment with different blend modes to understand their visual outcomes"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to define blend modes for elements?",
          "options": ["blend-mode", "element-blend-mode", "mix-blend-mode", "content-blend-mode"],
          "correctAnswer": 2
        },
        {
          "question": "What does 'mix-blend-mode: multiply;' do?",
          "options": ["Lightens colors", "Darkens colors by multiplying", "Inverts colors", "Screens colors"],
          "correctAnswer": 1
        },
        {
          "question": "Which property applies blend modes to background images and colors?",
          "options": ["background-mix-blend-mode", "bg-blend-mode", "background-blend-mode", "blend-background"],
          "correctAnswer": 2
        },
        {
          "question": "How many main types of CSS blend modes are there?",
          "options": ["One", "Two", "Three", "Four"],
          "correctAnswer": 1
        },
        {
          "question": "Which blend mode is the default, applying no blending?",
          "options": ["normal", "multiply", "screen", "overlay"],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-blend {\n  width: 100px;\n  height: 100px;\n  background-color: rgba(255, 0, 0, 0.7);\n  mix-blend-mode: screen; /* Try changing blend mode */\n  /* Position to overlap with the box below */\n  position: absolute;\n  top: 50px;\n  left: 50px;\n}\n\n.blend-underlay {\n  width: 150px;\n  height: 150px;\n  background-color: rgba(0, 0, 255, 0.7);\n  position: relative;\n}",
          "result": "Overlapping elements demonstrating CSS blend modes"
        },
        {
          "code": ".duotone-image {\n  mix-blend-mode: multiply;\n  background-color: #007bff;\n  width: 200px;\n  height: auto;\n  opacity: 0.8;\n}",
          "result": "Creating a duotone effect on an image using 'mix-blend-mode' and background color"
        },
        {
          "code": ".background-blend-example {\n  background-image: url('pattern1.png'), url('pattern2.png'); /* Replace with image URLs */\n  background-color: #f0f0f0;\n  background-blend-mode: overlay, multiply;\n  height: 200px;\n  background-size: cover;\n}",
          "result": "Using 'background-blend-mode' to blend multiple background images"
        }
      ],
      "keyPoints": [
        "Blend element content with background and underlying content using `mix-blend-mode`.",
        "Blend background images and colors with each other using `background-blend-mode`.",
        "Common blend modes include `normal`, `multiply`, `screen`, `overlay`, `lighten`, `darken`, `difference`, and many more.",
        "Blend modes can create complex and artistic visual effects directly in CSS.",
        "They are used for image effects, text styling, visual hierarchy, and interface enhancements.",
        "Experimentation with different blend modes is key to understanding their visual outcomes and creative potential.",
        "CSS blend modes offer a performant and declarative way to achieve sophisticated visual blending effects on the web."
      ]
    },
    {
      "id": "css-form-styling",
      "technology": "css",
      "category": "styling",
      "title": "CSS Form Styling",
      "description": "Style HTML forms and form elements to create visually appealing and user-friendly interfaces",
      "difficulty": "intermediate",
      "explanation": "CSS Form Styling is crucial for creating user-friendly and visually appealing web forms. Well-styled forms enhance user experience, improve accessibility, and align with the overall design of a website. CSS provides extensive capabilities for styling various form elements, including inputs, textareas, buttons, selects, checkboxes, radio buttons, and labels.  Key aspects of CSS form styling include:  **Basic Element Styling**:  * Inputs, Textareas, Selects: Control padding, margins, borders, background colors, text styles, and widths. * Buttons: Customize background colors, text colors, padding, borders, border-radius, cursor styles, and hover states. * Labels: Style labels for visual clarity and association with form controls.  **State-based Styling**:  * `:focus`: Style elements when they are focused (e.g., input fields). * `:hover`: Style elements on hover, especially buttons. * `:active`: Style elements when they are being actively clicked or pressed. * `:valid` and `:invalid`: Style form elements based on their validation state (e.g., valid or invalid input). * `:required` and `:optional`: Indicate required or optional fields visually. * `:disabled` and `:enabled`: Style disabled or enabled form elements.  **Layout and Spacing**:  * Use CSS Layout techniques like Flexbox or Grid to structure form elements and labels effectively. * Control spacing between form elements and labels using margins and padding for better readability and visual organization.  **Customizing Form Controls**:  * Checkboxes and Radio Buttons: Replace default browser styles with custom designs using pseudo-elements and background images or icons. * Select Dropdowns: Customize the appearance of select dropdown arrows and the dropdown list itself.  **Accessibility Considerations**:  * Ensure sufficient color contrast for text and backgrounds in form elements. * Provide clear focus indicators for keyboard navigation using `outline` or custom focus styles. * Use semantic HTML for form structure and enhance, not replace, accessibility with CSS.  Effective CSS form styling goes beyond mere aesthetics; it contributes to improved usability, accessibility, and a more engaging user interaction with web forms. By carefully styling form elements and states, you can create forms that are not only visually appealing but also intuitive and easy to use for all users.",
      "example": "input[type='text'],\ninput[type='email'],\ntextarea,\nselect {\n  padding: 0.7rem;\n  margin-bottom: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\nbutton[type='submit'] {\n  background-color: #4caf50;\n  color: white;\n  padding: 0.8rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton[type='submit']:hover {\n  background-color: #45a049;\n}",
      "previewHtml": "<form style='max-width: 300px;'>\n  <input type='text' placeholder='Your Name'><br>\n  <input type='email' placeholder='Your Email'><br>\n  <textarea placeholder='Your Message'></textarea><br>\n  <select>\n    <option value='option1'>Option 1</option>\n    <option value='option2'>Option 2</option>\n  </select><br>\n  <button type='submit'>Submit</button>\n</form>",
      "practice": [
        "Style input fields with custom borders, padding, and focus effects",
        "Design submit buttons with hover states and visual feedback",
        "Customize the appearance of checkboxes and radio buttons",
        "Style select dropdowns for better visual integration"
      ],
      "quiz": [
        {
          "question": "Which selector is best for targeting all input elements of type 'text'?",
          "options": ["input.text", "input-text", "input[type=text]", "text-input"],
          "correctAnswer": 2
        },
        {
          "question": "How can you remove the default border from form elements?",
          "options": ["border: hidden;", "remove-border: true;", "border: none;", "outline: none;"],
          "correctAnswer": 2
        },
        {
          "question": "Which CSS property is commonly used to visually indicate focus on a form element?",
          "options": ["highlight", "focus-style", "outline", "active-state"],
          "correctAnswer": 2
        },
        {
          "question": "Which pseudo-class can be used to style a required form field?",
          "options": [":required", ":optional", ":focus", ":valid"],
          "correctAnswer": 0
        },
        {
          "question": "What CSS layout technique is often used to structure form elements and labels?",
          "options": ["Tables", "Floats", "Flexbox or Grid", "Inline-block"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": "input[type='text'].interactive-form {\n  border: 2px solid #9b59b6;\n  padding: 0.5rem;\n  border-radius: 20px;\n}\n\ninput[type='text'].interactive-form:focus {\n  outline: none;\n  box-shadow: 0 0 5px #9b59b6;\n}",
          "result": "Styled input field with focus effect"
        },
        {
          "code": "button[type='submit'].custom-submit-button {\n  background-color: #ff6f61;\n  color: white;\n  padding: 0.8rem 1.5rem;\n  border: none;\n  border-radius: 25px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\nbutton[type='submit'].custom-submit-button:hover {\n  background-color: #e0564a;\n}",
          "result": "Custom styled submit button with hover effect"
        },
        {
          "code": "input[type='checkbox'].custom-checkbox {\n  appearance: none; /* Remove default appearance */\n  width: 20px;\n  height: 20px;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\ninput[type='checkbox'].custom-checkbox:checked {\n  background-color: #2ecc71;\n  border-color: #2ecc71;\n  background-image: url('check-icon.svg'); /* Replace with check icon URL */\n  background-repeat: no-repeat;\n  background-position: center;\n}",
          "result": "Customized checkbox appearance, replacing default styles"
        }
      ],
      "keyPoints": [
        "Style input fields, textareas, buttons, selects, labels, checkboxes, and radio buttons.",
        "Use attribute selectors (`input[type='text']`) for targeting specific input types.",
        "Enhance usability with focus states, hover effects, and visual feedback for validation states (:valid, :invalid).",
        "Improve form aesthetics and brand consistency by customizing form element appearance.",
        "Consider accessibility when styling forms, ensuring sufficient color contrast and clear focus indicators.",
        "Use CSS Layout (Flexbox or Grid) to structure form layouts effectively.",
        "Custom form control styling (checkboxes, radio buttons, selects) allows for more visually integrated forms."
      ]
    },
    {
      "id": "css-shapes",
      "technology": "css",
      "category": "layout",
      "title": "CSS Shapes",
      "description": "Create non-rectangular layouts and text flow around custom shapes using CSS Shapes",
      "difficulty": "advanced",
      "explanation": "CSS Shapes revolutionize web layout by allowing you to define non-rectangular shapes for elements and control how content flows around them. This capability moves beyond the traditional box-based model of CSS, enabling more creative and visually engaging designs. The core property for CSS Shapes is `shape-outside`, which defines a shape around which inline content should flow.  Shapes can be defined using:  * **Basic Shapes**: CSS provides functions to define basic shapes directly:  * `circle()`: Creates a circle shape.  * `ellipse()`: Creates an ellipse shape.  * `polygon()`: Creates a polygon shape by specifying a list of vertices (x, y coordinates).  * `inset()`: Creates a rectangle shape that is inset (shrunk) from the element's box.  * **Image-based Shapes**: You can use an image with transparency to define a shape using `shape-outside: url(image.png);`. The transparent or semi-transparent parts of the image define the shape.  * **Box Values**: You can use box values like `border-box`, `padding-box`, `content-box`, or `margin-box` to define the shape based on the element's box model.  For `shape-outside` to have an effect, the element typically needs to be floated (`float: left;` or `float: right;`) or absolutely positioned. Inline content will then flow around the defined shape instead of being confined to the element's rectangular box.  The `clip-path` property is often used in conjunction with `shape-outside`. While `shape-outside` defines the shape for content flow, `clip-path` actually clips the element itself to a shape, making it visually non-rectangular. You can use the same shape functions for `clip-path` as for `shape-outside`.  CSS Shapes are powerful for creating:  * Magazine-style layouts: Text flowing around images in non-rectangular shapes. * Unique visual effects: Clipping elements into circles, polygons, or custom shapes. * Layouts that break away from traditional rectangular grids: More organic and visually interesting designs. * Custom UI components: Non-rectangular buttons or interactive elements.  CSS Shapes open up new possibilities for web design, allowing for more expressive and visually dynamic layouts that go beyond the conventional rectangular boundaries.",
      "example": ".shape-example {\n  width: 200px;\n  height: 200px;\n  float: left;\n  shape-outside: circle(50%);\n  clip-path: circle(50%);\n  margin-right: 1rem;\n}\n\n.text-content {\n  /* Text will flow around the circular shape */\n}",
      "previewHtml": "<div style='display: flex; align-items: start;'>\n  <div class='shape-example' style='background-color: #e67e22;'></div>\n  <p class='text-content' style='flex: 1;'>This text is designed to flow around the circular shape defined by CSS Shapes. CSS Shapes enable web designers to move beyond the traditional rectangular box model for layouts, creating more visually engaging and unique designs. You can define shapes using various functions like circle(), ellipse(), polygon(), and even use images.</p>\n</div>",
      "practice": [
        "Create a circular image with text wrapping around it",
        "Design a layout with hexagonal or polygonal shaped elements",
        "Use an SVG path to define a complex shape for content flow"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to define a non-rectangular shape that content can flow around?",
          "options": ["clip-path", "shape-margin", "shape-outside", "shape-inside"],
          "correctAnswer": 2
        },
        {
          "question": "What CSS function is used to create a circular shape in 'shape-outside'?",
          "options": ["circle()", "ellipse()", "polygon()", "path()"],
          "correctAnswer": 0
        },
        {
          "question": "Does 'shape-outside' work on inline elements by default?",
          "options": ["Yes", "No, only on floated or absolutely positioned elements", "Only on block elements", "Only with JavaScript"],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS property is often used together with 'shape-outside' to visually clip the element to the same shape?",
          "options": ["shape-margin", "shape-clip", "clip-shape", "clip-path"],
          "correctAnswer": 3
        },
        {
          "question": "Besides basic shapes, how else can you define a shape for 'shape-outside'?",
          "options": ["Using SVG code directly in CSS", "Using JavaScript functions", "Using an image with transparency", "Using CSS animations"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-shape {\n  width: 150px;\n  height: 150px;\n  float: left;\n  background-color: #2980b9;\n  /* Try different shape functions: circle(), polygon(), ellipse() */\n  shape-outside: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n  margin-right: 1rem;\n}\n\n.interactive-text-flow {\n  flex: 1;\n}",
          "result": "Text flowing around a polygon shape"
        },
        {
          "code": ".ellipse-shape-image {\n  width: 200px;\n  height: 150px;\n  float: left;\n  shape-outside: ellipse(50% 50%);\n  clip-path: ellipse(50% 50%);\n  margin-right: 1rem;\n  background-image: url('image.jpg'); /* Replace with image URL */\n  background-size: cover;\n}",
          "result": "Image clipped into an ellipse shape with text flow"
        },
        {
          "code": ".inset-shape-example {\n  width: 250px;\n  height: 200px;\n  float: left;\n  shape-outside: inset(50px 30px);\n  clip-path: inset(50px 30px);\n  margin-right: 1rem;\n  background-color: #f1c40f;\n}",
          "result": "Element with an inset rectangular shape and text flow"
        }
      ],
      "keyPoints": [
        "Create non-rectangular shapes for layouts and content flow.",
        "Property: `shape-outside` defines the shape for content flow.",
        "Shape functions: `circle()`, `ellipse()`, `polygon()`, `inset()`, and image URLs can define shapes.",
        "`clip-path` is often used to visually clip the element to the same shape defined by `shape-outside`.",
        "`shape-outside` typically requires the element to be floated or absolutely positioned to have an effect.",
        "CSS Shapes enhance visual design and text flow control, allowing for more creative and organic layouts.",
        "They enable layouts that break away from traditional rectangular box-based designs, opening up new possibilities for web design."
      ]
    },
    {
      "id": "css-preprocessors",
      "technology": "css",
      "category": "tooling",
      "title": "CSS Preprocessors (Sass/Less)",
      "description": "Learn how to use CSS preprocessors like Sass and Less to enhance CSS development workflow",
      "difficulty": "intermediate",
      "explanation": "CSS Preprocessors, such as Sass (Syntactically Awesome Stylesheets) and Less (Leaner Style Sheets), are powerful tools that extend the capabilities of standard CSS, streamlining the CSS development workflow and improving code organization, maintainability, and efficiency. They introduce features not natively available in CSS, which are then compiled down to standard CSS that browsers can understand. Key features offered by CSS preprocessors include:  * **Variables**:  Allow you to store reusable values (like colors, fonts, spacing units) in variables, making it easy to update them across your stylesheets and ensuring consistency. * **Nesting**:  Enable you to nest CSS selectors, mirroring the HTML structure and making stylesheets more organized and readable. * **Mixins**:  Allow you to define reusable blocks of CSS code that can be included (mixed in) into multiple selectors, reducing code duplication and promoting modularity. * **Functions**:  Provide built-in functions for color manipulation (e.g., `darken()`, `lighten()`, `saturate()`), mathematical operations, and other utilities, extending CSS's functional capabilities. * **Operators**:  Support mathematical operators for calculations directly in CSS (e.g., for calculating widths, margins, or font sizes dynamically). * **Control Directives**:  Offer programming-like control structures like `@if`, `@else`, `@for`, and `@each` for conditional styling and looping, adding logic to your stylesheets. * **Importing**:  Allow you to split your CSS codebase into multiple files and import them into a main stylesheet, improving organization and maintainability, especially for large projects.  Popular CSS preprocessors are:  * **Sass (SCSS syntax)**: One of the most widely used preprocessors, known for its robust features and mature ecosystem. SCSS (Sassy CSS) is the newer, CSS-compatible syntax of Sass, using curly braces and semicolons, making it easier for CSS developers to adopt. * **Less**: Another popular preprocessor, simpler than Sass in some aspects, but still offers essential features like variables, mixins, nesting, and functions.  Using CSS preprocessors typically involves a build process where your preprocessor code (e.g., .scss or .less files) is compiled into standard CSS (.css files) that are then included in your HTML. This compilation step is usually integrated into web development workflows using task runners like npm scripts, Gulp, or Grunt, or build tools like Webpack or Parcel.  CSS preprocessors are invaluable for large projects, component-based architectures, and teams working on CSS, significantly enhancing productivity and code quality.",
      "example": "/* Sass Example */\n$primary-color: #3498db;\n\nbody {\n  font-family: sans-serif;\n  color: $primary-color;\n}\n\n.button {\n  background-color: $primary-color;\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n\n  &:hover {\n    background-color: darken($primary-color, 10%);\n  }\n}",
      "previewHtml": "<div style='font-family: sans-serif; color: #3498db;'>\n  <button style='background-color: #3498db; color: white; padding: 0.5rem 1rem; border-radius: 4px; border: none; cursor: pointer;'>Styled Button (Preprocessed)</button>\n</div>\n<!-- Note: This HTML is a representation of the *compiled* CSS output -->",
      "practice": [
        "Set up a Sass or Less project and compile stylesheets",
        "Use variables to manage colors and spacing in your CSS",
        "Create mixins for reusable style blocks",
        "Explore nesting for cleaner and more organized CSS"
      ],
      "quiz": [
        {
          "question": "What is the primary purpose of CSS preprocessors?",
          "options": ["To replace CSS entirely", "To add dynamic behavior to CSS", "To extend CSS with features like variables and mixins", "To optimize CSS for performance"],
          "correctAnswer": 2
        },
        {
          "question": "Which of the following is NOT a feature typically provided by CSS preprocessors?",
          "options": ["Variables", "Nesting", "Mixins", "Automatic browser compatibility"],
          "correctAnswer": 3
        },
        {
          "question": "Do browsers directly understand Sass or Less code?",
          "options": ["Yes", "No, it needs to be compiled to CSS", "Only modern browsers do", "Only with JavaScript"],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS preprocessor uses a syntax that is fully compatible with CSS (SCSS)?",
          "options": ["Less", "Stylus", "Sass (original indented syntax)", "Sass (SCSS syntax)"],
          "correctAnswer": 3
        },
        {
          "question": "What is a CSS mixin?",
          "options": ["A variable that stores colors.", "A function that performs calculations.", "A reusable block of CSS declarations.", "A way to nest CSS selectors."],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": "/* Example using Sass-like syntax (conceptual) */\n$base-font-size: 16px;\n\nbody {\n  font-size: $base-font-size;\n  h1 {\n    font-size: $base-font-size * 2;\n  }\n}",
          "result": "Conceptual example of Sass nesting and variables"
        },
        {
          "code": "/* Example of a Sass mixin (conceptual) */\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n     -moz-border-radius: $radius;\n          border-radius: $radius;\n}\n\n.button {\n  @include border-radius(5px);\n  /* ... other button styles ... */\n}",
          "result": "Conceptual example of a Sass mixin for vendor prefixes and border-radius"
        },
        {
          "code": "/* Example of Sass color function (conceptual) */\n$primary-color: #3498db;\n\n.button {\n  background-color: $primary-color;\n  &:hover {\n    background-color: lighten($primary-color, 20%); /* Lighten color on hover */\n  }\n}",
          "result": "Conceptual example of using a Sass color function to lighten a color on hover"
        }
      ],
      "keyPoints": [
        "Extend CSS with advanced features not natively available.",
        "Popular preprocessors: Sass (SCSS), Less, Stylus.",
        "Key features: variables, nesting, mixins, functions, operators, control directives, imports.",
        "Improve CSS organization, maintainability, and reusability.",
        "Streamline CSS development workflow, especially for large projects and teams.",
        "Preprocessors compile to standard CSS for browser compatibility.",
        "Enhance CSS with programming-like capabilities for dynamic and efficient styling."
      ]
    },
    {
      "id": "css-accessibility",
      "technology": "css",
      "category": "accessibility",
      "title": "CSS and Accessibility",
      "description": "Learn how CSS can be used to improve website accessibility for users with disabilities",
      "difficulty": "beginner",
      "explanation": "CSS plays a vital role in Web Accessibility, ensuring that web content is perceivable, operable, understandable, and robust for everyone, including users with disabilities. Accessible web design is not just an ethical consideration but also a legal and practical necessity. CSS, when used thoughtfully, can significantly enhance accessibility in several ways:  **Semantic HTML Structure**: CSS should be used to style semantic HTML elements appropriately, rather than trying to use CSS to make non-semantic elements appear semantic. Semantic HTML provides the underlying structure and meaning, which is crucial for assistive technologies like screen readers.  **Color Contrast**: Ensuring sufficient color contrast between text and background is paramount for users with low vision or color blindness. CSS properties like `color` and `background-color` should be chosen carefully, and tools like contrast checkers can help ensure WCAG (Web Content Accessibility Guidelines) compliance.  **Focus Indicators**: Clear and visible focus indicators are essential for keyboard users to navigate through interactive elements (links, form controls, buttons). CSS properties like `outline`, `border`, and `box-shadow` can be used to create custom focus styles.  **Layout and Order**: CSS layout techniques (Flexbox, Grid) should be used to create logical and predictable content order, ensuring that content makes sense when navigated linearly by screen readers or keyboard users. Avoid using CSS to visually reorder content in a way that disrupts the logical reading order.  **Text Styling for Readability**: Use CSS text properties like `font-size`, `line-height`, `letter-spacing`, and `word-spacing` to optimize text readability for all users, including those with cognitive disabilities or reading difficulties. Relative units like `rem` and `em` allow users to adjust font sizes according to their needs.  **Avoiding CSS-only Content**: Avoid using CSS pseudo-elements (`::before`, `::after`) or `content` property to insert critical content that is essential for understanding the webpage. Content should primarily reside in the HTML for screen readers and other assistive technologies to access it.  **Responsive Design for All**: Responsive CSS ensures that websites are accessible across various devices and screen sizes, benefiting all users, including those using zoom or assistive technologies.  **Testing for Accessibility**: Regularly test websites using accessibility testing tools, screen readers, and keyboard navigation to identify and address any CSS-related accessibility issues.  By prioritizing accessibility in your CSS practices, you contribute to creating a more inclusive web that is usable and enjoyable for everyone, regardless of their abilities.",
      "example": "/* Ensure sufficient color contrast */\n.accessible-text {\n  background-color: #000;\n  color: #fff; /* Good contrast ratio */\n}\n\n/* Focus indicator for keyboard navigation */\nbutton:focus {\n  outline: 2px solid blue;\n  outline-offset: 2px;\n}",
      "previewHtml": "<div class='accessible-text' style='background-color: #000; color: #fff; padding: 1rem;'>\n  Accessible Text with Good Contrast\n</div>\n<button style='padding: 0.5rem 1rem;'>Focusable Button</button>\n<button style='padding: 0.5rem 1rem;'>Another Button</button>",
      "practice": [
        "Check color contrast ratios for text and backgrounds",
        "Ensure focus indicators are visible for keyboard navigation",
        "Use CSS to enhance semantic HTML structure, not replace it",
        "Test layouts in high contrast mode and with screen readers"
      ],
      "quiz": [
        {
          "question": "What is the primary role of CSS in web accessibility?",
          "options": ["To add animations", "To control layout only", "To ensure content is perceivable and operable for everyone", "To replace HTML"],
          "correctAnswer": 2
        },
        {
          "question": "Why is color contrast important for accessibility?",
          "options": ["For aesthetic appeal", "To make websites load faster", "To ensure text is readable for users with visual impairments", "To reduce file size"],
          "correctAnswer": 2
        },
        {
          "question": "What CSS property is important for providing visual focus indication for keyboard users?",
          "options": ["cursor", "outline", "text-decoration", "visibility"],
          "correctAnswer": 1
        },
        {
          "question": "Which of the following is a key principle of WCAG related to CSS and accessibility?",
          "options": ["Website should be visually appealing.", "Content should be perceivable.", "CSS should be minimal.", "Website should load fast."],
          "correctAnswer": 1
        },
        {
          "question": "When using CSS for layout, what is important to maintain for accessibility?",
          "options": ["Visually complex layouts.", "Logical reading order of content.", "Use of only absolute positioning.", "Ignoring semantic HTML."],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": "/* Try adjusting colors to see contrast changes */\n.interactive-contrast {\n  background-color: #e0e0e0;\n  color: #333; /* Adjust this color */\n  padding: 0.5rem;\n}",
          "result": "Example of text and background color for contrast assessment"
        },
        {
          "code": "button.focus-style-example:focus {\n  outline: none; /* Remove default outline for customization */\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.5); /* Custom focus indicator */\n  border-color: #007bff;\n}",
          "result": "Custom focus indicator using 'box-shadow' and 'border-color'"
        },
        {
          "code": ".large-text-example {\n  font-size: 1.2rem; /* Use relative units */\n  line-height: 1.8; /* Good line height for readability */\n  max-width: 600px; /* Limit line length for readability */\n  margin: 0 auto;\n}",
          "result": "Example of CSS properties enhancing text readability for accessibility"
        }
      ],
      "keyPoints": [
        "CSS enhances web accessibility when used correctly.",
        "Ensure sufficient color contrast ratio between text and background for readability.",
        "Provide clear and visible focus indicators for keyboard navigation.",
        "Use CSS to enhance semantic HTML structure, not to compensate for non-semantic HTML.",
        "Maintain a logical reading order when using CSS layout techniques.",
        "Optimize text styling (font-size, line-height, letter-spacing) for readability.",
        "Test for accessibility using tools and screen readers to identify and fix issues."
      ]
    },
    {
      "id": "css-methodologies-bem",
      "technology": "css",
      "category": "architecture",
      "title": "CSS Methodologies (BEM)",
      "description": "Learn BEM (Block, Element, Modifier) methodology for writing modular and maintainable CSS",
      "difficulty": "intermediate",
      "explanation": "BEM (Block, Element, Modifier) is a widely adopted CSS methodology designed to create modular, reusable, and maintainable stylesheets, especially beneficial for large and complex web projects or component-based architectures. BEM addresses common CSS challenges like specificity conflicts, code duplication, and difficulty in understanding and maintaining stylesheets over time.  BEM organizes CSS classes based on three core concepts:  * **Block**: Represents a standalone, reusable component or entity. Blocks are semantically independent and can be used in isolation or in combination with other blocks. Block class names should describe their purpose, e.g., `.button`, `.card`, `.menu`, `.form`. * **Element**: Represents a part or component within a Block. Elements are contextually dependent on their Block and cannot be used independently outside of their Block. Element class names are formed by appending two underscores `__` followed by the element name to the Block name, e.g., `.button__text`, `.card__header`, `.menu__item`, `.form__input`. * **Modifier**: Represents a variation or state of a Block or an Element. Modifiers are used to change the appearance or behavior of a Block or Element in specific contexts. Modifier class names are formed by appending two hyphens `--` followed by the modifier name to the Block or Element name, e.g., `.button--primary`, `.card--featured`, `.menu__item--active`, `.form__input--error`.  Key benefits of using BEM methodology include:  * **Modularity**: BEM promotes modularity by encouraging the creation of independent and reusable blocks, making it easier to develop and maintain components in isolation. * **Maintainability**: BEM class naming conventions make CSS more predictable and easier to understand, reducing specificity conflicts and simplifying stylesheet maintenance. * **Reusability**: Blocks and Elements designed using BEM are highly reusable across different parts of a project or in different projects altogether. * **Specificity Control**: BEM class names are typically flat and avoid deep nesting, which helps in controlling CSS specificity and preventing unintended style overrides. * **Team Collaboration**: BEM provides a clear and consistent naming convention, making it easier for teams to collaborate on CSS and maintain a unified codebase. * **Scalability**: BEM methodology scales well for large projects, making CSS more manageable as projects grow in complexity.  While BEM is not the only CSS methodology, its simplicity, effectiveness, and wide adoption make it a valuable approach for structuring CSS in modern web development.",
      "example": "/* BEM Example */\n.button {\n  /* Block styles */\n}\n\n.button__text {\n  /* Element styles - part of button */\n}\n\n.button--primary {\n  /* Modifier styles - variation of button */\n  background-color: blue;\n  color: white;\n}",
      "previewHtml": "<button class='button button--primary'><span class='button__text'>Primary Button</span></button>\n<button class='button'><span class='button__text'>Default Button</span></button>",
      "practice": [
        "Refactor existing CSS using BEM naming conventions",
        "Create a component library using BEM methodology",
        "Practice writing CSS for blocks, elements, and modifiers",
        "Apply BEM in a small project to understand its benefits"
      ],
      "quiz": [
        {
          "question": "What does BEM stand for in CSS methodology?",
          "options": ["Box Element Model", "Block Element Modifier", "Basic Element Module", "Border Element Margin"],
          "correctAnswer": 1
        },
        {
          "question": "In BEM, what does a 'Block' represent?",
          "options": ["A section of a webpage", "A standalone entity or component", "A style rule", "A layout technique"],
          "correctAnswer": 1
        },
        {
          "question": "How are Modifiers represented in BEM class names?",
          "options": ["Using a single underscore '_'", "Using double underscores '__'", "Using a single hyphen '-'", "Using double hyphens '--'"],
          "correctAnswer": 3
        },
        {
          "question": "In BEM, Elements are contextually:",
          "options": ["Independent of Blocks", "Standalone components", "Dependent on their Block", "Reusable across different Blocks"],
          "correctAnswer": 2
        },
        {
          "question": "What is a key benefit of BEM methodology regarding CSS specificity?",
          "options": ["Increases CSS specificity", "Reduces CSS specificity conflicts", "Ignores CSS specificity", "Makes CSS specificity irrelevant"],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": "/* Example classes using BEM naming */\n.card {\n  /* Block styles */\n}\n\n.card__header {\n  /* Card element: header */\n}\n\n.card--featured {\n  /* Card modifier: featured */\n  border: 2px solid gold;\n}",
          "result": "Example of BEM class naming convention"
        },
        {
          "code": "/* Example of a BEM button component */\n.form-button {\n  display: inline-block;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 5px;\n  background-color: #3498db;\n  color: white;\n  cursor: pointer;\n}\n\n.form-button__label {\n  font-size: 1em;\n  font-weight: bold;\n}\n\n.form-button--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}",
          "result": "BEM example for a button component with block, element, and modifier classes"
        },
        {
          "code": "/* Example of BEM card component structure */\n<div class='card'>\n  <div class='card__header'>\n    <h2 class='card__title'>Card Title</h2>\n  </div>\n  <div class='card__body'>\n    <p class='card__text'>Card content goes here...</p>\n  </div>\n  <div class='card__footer'>\n    <button class='card__button card__button--primary'>Action</button>\n  </div>\n</div>",
          "result": "HTML structure example using BEM naming conventions for a card component"
        }
      ],
      "keyPoints": [
        "Methodology for writing modular, reusable, and maintainable CSS.",
        "BEM stands for Block, Element, Modifier.",
        "Blocks are standalone components; Elements are parts of Blocks; Modifiers are variations.",
        "Promotes reusability, maintainability, and scalability of CSS.",
        "Reduces CSS specificity issues and improves code organization.",
        "Beneficial for large projects, component-based architectures, and team collaboration.",
        "BEM class naming conventions are clear, consistent, and easy to understand."
      ]
    },
    {
      "id": "css-contain",
      "technology": "css",
      "category": "performance",
      "title": "CSS Contain Property",
      "description": "Improve rendering performance by isolating style and layout effects with CSS contain property",
      "difficulty": "intermediate",
      "explanation": "The CSS `contain` property is a powerful performance optimization tool that allows you to isolate parts of your webpage from the rest of the document tree for rendering purposes. By applying `contain` to an element, you inform the browser that the element and its subtree are largely independent of the rest of the page in terms of style, layout, paint, and size calculations. This isolation enables browsers to perform optimizations, significantly improving rendering performance, especially in complex layouts or pages with dynamic content.  The `contain` property accepts several values, each providing a different level of containment:  * `contain: layout`: Indicates that layout of the element's content is independent of the rest of the page. Changes within the element will not trigger layout recalculations outside of it. * `contain: paint`: Indicates that painting of the element and its descendants is independent of the rest of the page. Changes within the element will not trigger repainting outside of it. * `contain: style`: Indicates that style calculations for the element and its descendants are independent. Style changes within the element will not trigger style recalculations outside of it. * `contain: size`: Indicates that the element's size is independent of its content. This is less commonly used directly but is implicitly included in `contain: strict`. * `contain: content`: Shorthand for `contain: style layout paint`. It provides containment for style, layout, and paint, but not size. * `contain: strict`: Shorthand for `contain: size layout paint style`. This is the most restrictive form of containment, providing all types of isolation. * `contain: none`: Default value, no containment is applied.  Benefits of using `contain` property:  * **Improved Rendering Performance**: By limiting the scope of recalculations, `contain` reduces the browser's workload, leading to faster rendering, smoother scrolling, and better overall page performance, especially on less powerful devices or for complex pages. * **Faster Initial Load**: By isolating parts of the page, browsers can perform initial layout and paint more efficiently, potentially speeding up the initial page load time. * **Reduced Reflows and Repaints**: `contain` helps minimize reflows (layout recalculations) and repaints (screen redraws) caused by dynamic content updates or user interactions, leading to a more responsive user interface. * **Better Performance for Animations and Interactions**: When animating or interacting with contained elements, the performance impact is localized, preventing jank or slowdowns in other parts of the page.  `contain` is particularly effective for components or sections of a page that are relatively independent and self-contained, like widgets, sidebars, or complex UI components. Applying `contain` strategically can significantly enhance the performance of modern web applications, especially those with rich interfaces and dynamic content.",
      "example": ".contain-layout {\n  contain: layout;\n  /* Only layout containment */\n  border: 1px solid #ccc;\n  padding: 1rem;\n}\n\n.contain-paint {\n  contain: paint;\n  /* Only paint containment */\n  background-color: #f0f0f0;\n  padding: 1rem;\n}\n\n.contain-strict {\n  contain: strict; /* layout, paint, size, and style containment */\n  border: 2px dashed blue;\n  padding: 1rem;\n}",
      "previewHtml": "<div class='contain-layout'>Layout Containment</div>\n<div class='contain-paint'>Paint Containment</div>\n<div class='contain-strict'>Strict Containment</div>",
      "practice": [
        "Identify performance bottlenecks in your CSS rendering",
        "Apply 'contain: layout' to elements to limit layout recalculations",
        "Use 'contain: paint' to optimize paint operations",
        "Experiment with 'contain: strict' for full isolation"
      ],
      "quiz": [
        {
          "question": "What is the main benefit of using the CSS 'contain' property?",
          "options": ["Improved CSS syntax", "Enhanced browser compatibility", "Improved rendering performance", "Simplified CSS selectors"],
          "correctAnswer": 2
        },
        {
          "question": "Which 'contain' value provides layout, paint, size, and style containment?",
          "options": ["layout", "paint", "strict", "content"],
          "correctAnswer": 2
        },
        {
          "question": "What type of containment does 'contain: paint;' provide?",
          "options": ["Layout containment", "Style containment", "Paint containment", "Size containment"],
          "correctAnswer": 2
        },
        {
          "question": "Which 'contain' value is shorthand for 'contain: style layout paint'?",
          "options": ["strict", "content", "all", "basic"],
          "correctAnswer": 1
        },
        {
          "question": "What is the default value of the 'contain' property?",
          "options": ["layout", "paint", "strict", "none"],
          "correctAnswer": 3
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-contain {\n  contain: layout paint;\n  border: 1px dotted green;\n  padding: 0.5rem;\n  /* Observe performance difference when toggling contain property */\n}",
          "result": "Element with layout and paint containment for performance optimization"
        },
        {
          "code": ".complex-component {\n  contain: strict;\n  width: 300px;\n  height: 200px;\n  background-color: #e0e0e0;\n  padding: 1.5rem;\n  /* Simulate complex content within */\n}\n\n/* Applying contain: strict to isolate a complex component for performance */",
          "result": "Example of using 'contain: strict' for a complex component"
        },
        {
          "code": ".scrollable-area {\n  contain: paint;\n  height: 300px;\n  overflow-y: auto;\n  background-color: #f5f5f5;\n  padding: 1rem;\n  /* Optimizing paint performance for a scrollable area */\n}",
          "result": "Using 'contain: paint' to optimize painting for a scrollable container"
        }
      ],
      "keyPoints": [
        "Improves CSS rendering performance by isolating elements from the rendering tree.",
        "Isolates elements in terms of layout, paint, style, and size recalculations.",
        "`contain` property values include `layout`, `paint`, `style`, `size`, `content`, `strict`, and `none`.",
        "`contain: strict` provides the most comprehensive containment (size, layout, paint, style).",
        "Optimize recalculation of style, layout, and paint operations, leading to faster rendering.",
        "Useful for complex layouts, dynamic content, and performance-critical web applications.",
        "Apply `contain` strategically to independent components or sections to maximize performance benefits."
      ]
    },
    {
      "id": "css-multicolumn-layout",
      "technology": "css",
      "category": "layout",
      "title": "CSS Multi-column Layout",
      "description": "Create newspaper-like layouts with CSS multi-column properties",
      "difficulty": "intermediate",
      "explanation": "CSS Multi-column Layout is a powerful module that enables you to create layouts where content is automatically flowed into multiple columns, similar to newspaper or magazine layouts. This is particularly useful for presenting long blocks of text or lists in a more organized and readable manner, especially on wider screens. CSS Multi-column properties provide control over the number of columns, spacing between them, and visual separators.  Key CSS Multi-column properties include:  * `column-count`: Specifies the desired number of columns an element should be divided into. The browser will automatically adjust column widths to fit the content within the available space. * `column-width`: Specifies the ideal width for each column. The browser will create as many columns of this width as possible within the container. If both `column-count` and `column-width` are set, `column-count` is often treated as a maximum number of columns. * `columns`: Shorthand property for setting both `column-width` and `column-count` in one declaration. * `column-gap`: Sets the gap (gutter) between columns. * `column-rule-width`, `column-rule-style`, `column-rule-color`: Define the width, style, and color of a visual rule (line) drawn between columns, similar to the `border` property but for column separators. Shorthand property `column-rule` can set all three at once. * `column-span`: Allows an element to span across all columns in a multi-column container (`none` - default, element does not span; `all` - element spans across all columns). Useful for headings or subheadings that should span the full width above multi-column content. * `column-fill`: Controls how columns are filled when content is shorter than the container height (`balance` - default, attempts to balance content evenly across columns; `auto` - columns are filled sequentially).  CSS Multi-column Layout is beneficial for:  * Presenting long articles, blog posts, or documentation in a more readable format on wider screens by breaking text into columns. * Creating magazine-style layouts with text flowing around images or other elements spanning columns. * Displaying lists of items, navigation links, or product listings in columns for better organization and space utilization. * Enhancing the visual presentation of content-heavy websites and improving readability on larger displays.  While Flexbox and Grid are often preferred for overall page layouts, CSS Multi-column Layout remains a valuable tool specifically for managing text flow and creating column-based content presentation within sections of a webpage.",
      "example": ".multicolumn-container {\n  column-count: 3;\n  column-gap: 2rem;\n  column-rule: 1px solid #ccc;\n  padding: 1rem;\n}",
      "previewHtml": "<div class='multicolumn-container' style='background-color: #f0f0f0;'>\n  <p>This is a long block of text that will be distributed across multiple columns. Multi-column layout is great for presenting articles, lists, or any content that benefits from being organized in columns for better readability on larger screens.</p>\n  <p>Here is more text to fill up the columns and demonstrate how the content flows from one column to the next. You can control the number of columns, the gap between them, and even add a visual rule to separate them.</p>\n</div>",
      "practice": [
        "Create a text article layout with 2-4 columns",
        "Implement a list of items displayed in columns",
        "Experiment with 'column-span' to span elements across columns"
      ],
      "quiz": [
        {
          "question": "Which CSS property defines the number of columns in a multi-column layout?",
          "options": ["columns", "column-width", "column-count", "multi-columns"],
          "correctAnswer": 2
        },
        {
          "question": "What property controls the space between columns in a multi-column layout?",
          "options": ["column-spacing", "column-gap", "column-rule-gap", "gap-columns"],
          "correctAnswer": 1
        },
        {
          "question": "Which property adds a visual separator line between columns?",
          "options": ["column-border", "column-separator", "column-line", "column-rule"],
          "correctAnswer": 3
        },
        {
          "question": "What does 'column-span: all;' do?",
          "options": ["Spans an element across all rows.", "Spans an element across all columns.", "Spans columns and rows.", "Removes column spanning."],
          "correctAnswer": 1
        },
        {
          "question": "What is the default value for 'column-fill' property?",
          "options": ["auto", "balance", "equal", "stretch"],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-multicolumn {\n  column-count: 2;\n  column-gap: 1.5rem;\n  /* Try changing column-count and column-gap values */\n}",
          "result": "Text content distributed into columns"
        },
        {
          "code": ".multicolumn-list {\n  column-count: 3;\n  column-gap: 1rem;\n  list-style: none;\n  padding: 0;\n}\n\n.multicolumn-list li {\n  margin-bottom: 0.5rem;\n}",
          "result": "List of items displayed in a multi-column layout"
        },
        {
          "code": ".multicolumn-article {\n  column-count: 2;\n  column-gap: 2rem;\n  column-rule: 1px dashed #ccc;\n}\n\n.article-heading {\n  column-span: all;\n  text-align: center;\n  margin-bottom: 1rem;\n}",
          "result": "Article layout with multi-columns and a heading spanning across columns"
        }
      ],
      "keyPoints": [
        "Create newspaper or magazine-like layouts with text flowing into columns.",
        "Key properties: `column-count`, `column-width`, `column-gap`, `column-rule`, `column-span`, `column-fill`.",
        "Organize long text blocks, lists, and content for better readability, especially on wider screens.",
        "`column-count` specifies the number of columns; `column-width` specifies the ideal column width.",
        "`column-rule` adds visual separators between columns.",
        "`column-span: all` allows elements to span across all columns.",
        "Useful for articles, blog posts, documentation, lists, and magazine-style designs."
      ]
    },
    {
      "id": "css-viewport-units",
      "technology": "css",
      "category": "responsive",
      "title": "CSS Viewport Units (vw, vh, vmin, vmax)",
      "description": "Use viewport units for sizing elements relative to the viewport width and height",
      "difficulty": "beginner",
      "explanation": "CSS Viewport Units are relative length units in CSS that are based on the dimensions of the viewport – the visible area of the browser window. They provide a way to size elements proportionally to the viewport's width and height, making them incredibly useful for creating responsive layouts and elements that scale dynamically with the browser window size.  The main CSS viewport units are:  * `vw` (Viewport Width): `1vw` is equal to 1% of the viewport's width. For example, `50vw` would be 50% of the viewport width. * `vh` (Viewport Height): `1vh` is equal to 1% of the viewport's height. For example, `100vh` would make an element take up the full viewport height. * `vmin` (Viewport Minimum): `1vmin` is equal to 1% of the *smaller* dimension of the viewport (either width or height, whichever is smaller). This unit is useful for ensuring elements remain fully visible within the viewport, regardless of orientation. * `vmax` (Viewport Maximum): `1vmax` is equal to 1% of the *larger* dimension of the viewport (either width or height, whichever is larger).  Viewport units are particularly beneficial for:  * Full-viewport layouts: Creating elements that span the entire width or height of the browser window (e.g., full-screen banners, hero sections, or backgrounds) using `100vw` or `100vh`. * Responsive typography: Scaling font sizes proportionally to the viewport width using `vw` units, making text larger on wider screens and smaller on narrower screens. * Maintaining aspect ratios: Using `vmin` or `vmax` to size elements while ensuring they always fit within the viewport, regardless of orientation changes. * Creating consistent spacing and sizing across different screen sizes: Viewport units provide a relative measure that adapts to the user's viewport, contributing to a more consistent visual experience across devices.  It's important to note that viewport units are relative to the *initial* viewport size. In some mobile browsers, the viewport size can change when the address bar is hidden or shown, which might affect the actual rendered size of elements using viewport units. However, for most common responsive design scenarios, viewport units are highly effective and widely supported.",
      "example": ".viewport-unit-box {\n  width: 50vw; /* 50% of viewport width */\n  height: 30vh; /* 30% of viewport height */\n  background-color: #2ecc71;\n  color: white;\n  text-align: center;\n  padding: 2rem;\n}",
      "previewHtml": "<div class='viewport-unit-box'>\n  Sized with Viewport Units\n</div>",
      "practice": [
        "Create a full-viewport-width banner using '100vw'",
        "Design a square element that always fits within the viewport using 'vmin'",
        "Implement typography that scales with viewport width using 'vw' units"
      ],
      "quiz": [
        {
          "question": "What does '1vw' represent in CSS?",
          "options": ["1% of viewport height", "1 pixel of viewport width", "1% of viewport width", "1 viewport unit"],
          "correctAnswer": 2
        },
        {
          "question": "Which viewport unit is relative to the smaller dimension (width or height) of the viewport?",
          "options": ["vw", "vh", "vmin", "vmax"],
          "correctAnswer": 2
        },
        {
          "question": "If the viewport is 800px wide and 600px high, what is the value of '50vh'?",
          "options": ["800px", "600px", "400px", "300px"],
          "correctAnswer": 3
        },
        {
          "question": "Which viewport unit would you use to make an element's size relative to the larger dimension of the viewport?",
          "options": ["vw", "vh", "vmin", "vmax"],
          "correctAnswer": 3
        },
        {
          "question": "Are viewport units absolute or relative units?",
          "options": ["Absolute", "Relative", "Both", "Neither"],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-viewport-unit {\n  width: 70vw;\n  height: 20vh;\n  background-color: #f1c40f;\n  color: #333;\n  /* Resize the browser window to see unit responsiveness */\n}",
          "result": "Element sized responsively with viewport units"
        },
        {
          "code": ".full-width-banner {\n  width: 100vw;\n  height: 150px;\n  background-color: #9b59b6;\n  color: white;\n  text-align: center;\n  line-height: 150px;\n}",
          "result": "Full-viewport-width banner using '100vw'"
        },
        {
          "code": ".square-vmin-example {\n  width: 50vmin;\n  height: 50vmin;\n  background-color: #e74c3c;\n  border: 2px solid white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n}",
          "result": "Square element sized using 'vmin' to always fit within the viewport"
        }
      ],
      "keyPoints": [
        "Size elements relative to the viewport (browser window) dimensions.",
        "Viewport units: `vw`, `vh`, `vmin`, `vmax`.",
        "`vw` and `vh` are percentages of viewport width and height, respectively.",
        "`vmin` is relative to the smaller viewport dimension; `vmax` to the larger.",
        "Essential for creating full-screen layouts, responsive scaling, and dynamic sizing.",
        "Useful for typography that scales with viewport width for better readability across devices.",
        "Viewport units are relative units, making layouts adaptable to different screen sizes."
      ]
    },
    {
      "id": "css-logical-properties",
      "technology": "css",
      "category": "layout",
      "title": "CSS Logical Properties and Values",
      "description": "Write layout-agnostic CSS with logical properties for internationalization and writing modes",
      "difficulty": "advanced",
      "explanation": "CSS Logical Properties and Values are a modern approach to CSS layout that promotes internationalization (i18n) and writing mode flexibility. Instead of relying on physical directions (top, right, bottom, left), logical properties use directional terms that are relative to the writing mode and text direction of the document. This makes CSS layout more adaptable to different languages and writing systems, including left-to-right (LTR) and right-to-left (RTL) languages, as well as vertical writing modes.  Key logical properties include:  * **Block and Inline Dimensions**:  * `block-size`: Replaces `height` in horizontal writing modes, `width` in vertical writing modes. * `inline-size`: Replaces `width` in horizontal writing modes, `height` in vertical writing modes. * `min-block-size`, `max-block-size`, `min-inline-size`, `max-inline-size`: Logical counterparts of `min-height`, `max-height`, `min-width`, `max-width`.  * **Block and Inline Margins and Paddings**:  * `margin-block-start`, `margin-block-end`: Logical top and bottom margins in horizontal writing modes, left and right in vertical writing modes. * `margin-inline-start`, `margin-inline-end`: Logical left and right margins in horizontal writing modes, top and bottom in vertical writing modes. * `padding-block-start`, `padding-block-end`, `padding-inline-start`, `padding-inline-end`: Logical paddings, following the same directional logic as margins.  * **Border Properties**:  * `border-block-start`, `border-block-end`, `border-inline-start`, `border-inline-end`: Logical borders, similarly adapting to writing modes. * `border-block-start-width`, `border-block-end-style`, etc.: Component properties for logical borders.  * **Offset Properties**:  * `inset-block-start`, `inset-block-end`, `inset-inline-start`, `inset-inline-end`: Logical counterparts of `top`, `bottom`, `left`, `right` for positioned elements.  Logical values are also introduced for properties like `float`, `text-align`, and `clear`:  * `float: inline-start`, `float: inline-end`: Logical `float: left` and `float: right`. * `text-align: start`, `text-align: end`: Align text to the start or end of the inline direction, adapting to text direction. * `clear: block-start`, `clear: block-end`, `clear: inline-start`, `clear: inline-end`, `clear: both-inline`, `clear: both-block`: Logical values for the `clear` property.  Using logical properties and values makes your CSS layout more robust and adaptable across different writing modes and text directions, simplifying the process of creating internationalized websites and applications. They abstract away physical directions, focusing instead on the logical flow of content, leading to more semantic and future-proof stylesheets.",
      "example": ".logical-props-box {\n  padding-block-start: 1rem; /* Logical top in horizontal writing mode */\n  padding-inline-end: 2rem;  /* Logical right in left-to-right writing mode */\n  border-inline-start: 3px solid blue; /* Logical left border */\n  margin-block-end: 1.5rem;\n}",
      "previewHtml": "<div class='logical-props-box' style='background-color: #d4e6f1; border: 1px solid #aed6f1;'>\n  Content with Logical Properties\n</div>",
      "practice": [
        "Convert physical properties (top, right, etc.) to logical properties in a layout",
        "Create layouts that adapt to right-to-left writing modes",
        "Experiment with different writing modes and observe logical property behavior"
      ],
      "quiz": [
        {
          "question": "What is the main advantage of using CSS logical properties?",
          "options": ["Improved performance", "Better browser compatibility", "Layout-agnostic CSS for internationalization", "Simplified CSS syntax"],
          "correctAnswer": 2
        },
        {
          "question": "In left-to-right writing mode, 'inline-start' corresponds to which physical direction?",
          "options": ["top", "right", "bottom", "left"],
          "correctAnswer": 3
        },
        {
          "question": "Which logical property replaces 'margin-top' in block dimension?",
          "options": ["margin-inline-start", "margin-inline-end", "margin-block-start", "margin-block-end"],
          "correctAnswer": 2
        },
        {
          "question": "What does 'block-size' property control in a horizontal writing mode?",
          "options": ["Width", "Height", "Font size", "Margin"],
          "correctAnswer": 1
        },
        {
          "question": "Which writing mode do logical properties primarily aim to support?",
          "options": ["Vertical only", "Horizontal only", "Both horizontal and vertical, and right-to-left languages", "Only right-to-left languages"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-logical {\n  padding-inline-start: 20px;\n  border-block-end: 2px dashed red;\n  /* Try changing writing-mode property on the container */\n}",
          "result": "Element styled with logical properties adapting to writing mode"
        },
        {
          "code": ".logical-layout-container {\n  direction: rtl; /* Right-to-left direction */\n  border-inline-start: 5px solid green; /* Logical left border in RTL */\n  padding-inline-start: 1rem; /* Logical left padding in RTL */\n  background-color: #f0f0f0;\n  padding: 1rem;\n}\n\n.logical-text {\n  text-align: start; /* Logical text alignment - right-aligned in RTL */\n}",
          "result": "Layout adapting to right-to-left direction using logical properties"
        },
        {
          "code": ".vertical-writing-example {\n  writing-mode: vertical-lr; /* Vertical writing mode */\n  border-block-end: 4px solid blue; /* Logical bottom border in vertical mode */\n  margin-block-end: 1.5rem; /* Logical bottom margin in vertical mode */\n  padding: 1rem;\n  background-color: #e6f1d4;\n}",
          "result": "Layout adapting to vertical writing mode using logical properties"
        }
      ],
      "keyPoints": [
        "Layout-agnostic CSS for internationalization and writing mode flexibility.",
        "Logical properties: `inline-start`, `inline-end`, `block-start`, `block-end`, and their related properties.",
        "Adapt to different writing modes (horizontal, vertical) and text directions (LTR, RTL).",
        "Enhance global website compatibility and accessibility for diverse languages.",
        "Promote semantic CSS by focusing on content flow rather than physical directions.",
        "Simplify CSS for internationalization and make layouts more robust and adaptable.",
        "Logical values for properties like `float`, `text-align`, and `clear` further enhance layout flexibility."
      ]
    },
    {
      "id": "css-stacking-context",
      "technology": "css",
      "category": "layout",
      "title": "CSS Stacking Context",
      "description": "Understand and manage stacking order of elements using CSS stacking context",
      "difficulty": "advanced",
      "explanation": "CSS Stacking Context is a crucial concept for understanding how elements are visually layered along the z-axis in HTML documents. It's a three-dimensional conceptualization that determines the painting order of elements when they overlap. Mastering stacking contexts is essential for controlling the visual hierarchy and layering effects in complex web layouts, especially when using positioned elements and `z-index`.  A **stacking context** is formed under certain conditions, which create a new layer in the z-ordering. These conditions include:  * **Root Element**: The `<html>` element forms the root stacking context. * **Positioned Elements with `z-index`**: Elements with `position: relative`, `position: absolute`, `position: fixed`, or `position: sticky` and a `z-index` value other than `auto` create a new stacking context. * **Flex and Grid Items with `z-index`**: Flex items and Grid items with a `z-index` value other than `auto` create a new stacking context. * **Elements with `opacity` less than 1**: When `opacity` is set to a value less than 1, a new stacking context is created. * **Elements with `transform` not set to `none`**: Any value of `transform` other than `none` creates a new stacking context. * **Elements with `filter` not set to `none`**: Applying any `filter` value other than `none` creates a new stacking context. * **Elements with `isolation: isolate`**: Setting `isolation: isolate` explicitly creates a new stacking context. * **`will-change` property**: Specifying certain values for `will-change` (e.g., `transform`, `opacity`) can also create a stacking context. * **`contain: paint`**: Setting `contain: paint` or `contain: strict` creates a stacking context.  Within a stacking context, child elements are stacked relative to each other, based on their `z-index` values and source order. Importantly, `z-index` values only have meaning *within* the same stacking context. When a new stacking context is created, it acts as a self-contained unit for z-ordering. Elements within a stacking context are stacked in the following order (from back to front):  1. Background and borders of the stacking context root element. 2. Negative stacking contexts of children. 3. Block-level, non-positioned descendants (in HTML source order). 4. Float descendants (in HTML source order). 5. Inline-level, non-positioned descendants (in HTML source order). 6. `z-index: 0` or `z-index: auto` (default stacking level) positioned descendants (in HTML source order). 7. Positive stacking contexts of children (z-index: 1, 2, 3, etc., in order of z-index value and then source order).  Understanding stacking contexts is crucial for:  * Controlling element overlap and visual hierarchy. * Debugging z-index issues when elements are not stacking as expected. * Creating complex layouts with layered elements and overlays. * Managing the z-ordering of elements within components or sections of a webpage.  By mastering stacking contexts, you can achieve precise control over the visual layering and depth of your web designs.",
      "example": ".stacking-context-parent {\n  position: relative;\n  z-index: 1;\n  background-color: #f9f9f9;\n  padding: 1rem;\n}\n\n.stacking-context-child {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  background-color: #e74c3c;\n  color: white;\n  padding: 1rem;\n  z-index: 10; /* Stacks above elements in parent context */\n}",
      "previewHtml": "<div class='stacking-context-parent'>\n  Parent Stacking Context (z-index: 1)\n  <div class='stacking-context-child'>Child (z-index: 10)</div>\n</div>",
      "practice": [
        "Create overlapping elements and control their stacking order using z-index",
        "Experiment with different properties that create stacking contexts",
        "Debug stacking issues by understanding stacking context hierarchy"
      ],
      "quiz": [
        {
          "question": "What is a CSS stacking context?",
          "options": ["A layout method", "A way to animate elements", "A 3D layering of elements along the z-axis", "A type of CSS selector"],
          "correctAnswer": 2
        },
        {
          "question": "Which CSS property is primarily used to control the stacking order within a stacking context?",
          "options": ["order", "stack-order", "z-index", "layer-index"],
          "correctAnswer": 2
        },
        {
          "question": "Which CSS property, when set to a value other than 'static', can create a new stacking context?",
          "options": ["display", "float", "position", "visibility"],
          "correctAnswer": 2
        },
        {
          "question": "Does 'z-index' property have effect on statically positioned elements?",
          "options": ["Yes, always", "No, never", "Only on inline elements", "Only with JavaScript"],
          "correctAnswer": 1
        },
        {
          "question": "Which property, when set to a value less than 1, creates a new stacking context?",
          "options": ["visibility", "opacity", "overflow", "display"],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-stacking {\n  position: relative;\n  width: 100px;\n  height: 100px;\n  background-color: #95a5a6;\n  /* Try changing z-index values to alter stacking order */\n  z-index: 0;\n}\n\n.overlay-element {\n  position: absolute;\n  top: 30px;\n  left: 30px;\n  background-color: rgba(241, 196, 15, 0.8);\n  z-index: 1; /* Higher z-index */\n}",
          "result": "Overlapping elements demonstrating stacking context and z-index"
        },
        {
          "code": ".parent-stacking-context {\n  position: relative;\n  z-index: 10; /* Parent stacking context with z-index */\n}\n\n.child-stacking-context {\n  position: absolute;\n  z-index: 5; /* Child z-index relative to parent context */\n  top: 20px;\n  left: 20px;\n  background-color: lightcoral;\n}",
          "result": "Child element's z-index is relative to its parent's stacking context"
        },
        {
          "code": ".opacity-stacking-context {\n  opacity: 0.8; /* Creates a new stacking context */\n  position: relative;\n  background-color: lightblue;\n}\n\n.overlay-in-opacity-context {\n  position: absolute;\n  z-index: 100; /* Stacks within opacity-created context */\n  top: 10px;\n  left: 10px;\n  background-color: rgba(255,255,255,0.7);\n}",
          "result": "Opacity less than 1 creating a new stacking context and affecting z-index behavior"
        }
      ],
      "keyPoints": [
        "3D layering of elements along the z-axis, determining overlapping element order.",
        "Controlled by `z-index` and the creation of stacking contexts.",
        "Stacking contexts are created by root element, positioned elements with `z-index`, flex/grid items with `z-index`, `opacity < 1`, `transform != none`, `filter != none`, `isolation: isolate`, `will-change`, and `contain: paint/strict`.",
        "`z-index` values are only relative within the same stacking context.",
        "Understanding stacking context hierarchy is crucial for complex layouts and visual layering.",
        "Correctly managing stacking contexts avoids unexpected z-index behavior and ensures desired visual hierarchy.",
        "Elements are stacked within a stacking context based on source order and `z-index` values, following a defined stacking order."
      ]
    },
     {
      "id": "css-float-layout",
      "technology": "css",
      "category": "layout",
      "title": "CSS Float Layout",
      "description": "Understand and use CSS float property for creating layouts, especially for text wrapping around elements",
      "difficulty": "beginner",
      "explanation": "CSS Float is a positioning property that moves an element to the left or right side of its containing box. The key characteristic of floated elements is that they are removed from the normal document flow, and other content (like text and inline elements) will wrap around them. While modern CSS layouts often favor Flexbox and Grid for overall page structure, `float` remains relevant and useful for specific layout scenarios, particularly for text wrapping around images or creating simple multi-column layouts, especially in contexts where backward compatibility with older browsers is a concern.  When an element is floated using `float: left` or `float: right`, it is taken out of the normal flow of the document. This means it no longer occupies space in the layout in the same way as non-floated elements. Instead, it shifts to the left or right edge of its container, and subsequent content flows around it.  Key aspects of CSS Float layout:  * **Float Values**: The `float` property accepts values: `left`, `right`, `none` (default - no float), `inherit`. * **Text Wrapping**: The primary purpose of `float` is to enable text and inline content to wrap around an element. This is commonly used for placing images within blocks of text, allowing the text to flow naturally around the image. * **Clearing Floats**: Because floated elements are removed from the normal flow, they can cause layout issues if not properly contained or 'cleared'. Common techniques for clearing floats include:  * **Clearfix Technique**: Using a pseudo-element (`::after`) on the container of floated elements to clear the float and force the container to expand to enclose the floated content. This often involves CSS like `.clearfix::after { content: ''; display: block; clear: both; }` and applying the class `.clearfix` to the container.  * **Overflow: auto or hidden**: Setting `overflow: auto` or `overflow: hidden` on the container of floated elements can also clear the float in many cases by establishing a new block formatting context.  * **Clear Property**: Applying `clear: both`, `clear: left`, or `clear: right` to an element *after* the floated elements to prevent it from flowing up alongside the floats. * **Legacy Layouts**: While less common for modern layouts, `float` was historically used to create multi-column layouts and basic page structures before the advent of Flexbox and Grid.  While Flexbox and Grid offer more robust and flexible layout solutions for complex structures, understanding `float` is still valuable for:  * Maintaining legacy codebases that use float-based layouts. * Implementing specific text wrapping effects. * Creating simple column layouts in scenarios where backward compatibility is important. * Understanding the fundamentals of CSS layout and content flow.",
      "example": ".float-container {\n  overflow: auto; /* clearfix to contain floated children */\n}\n\n.float-element {\n  float: left;\n  width: 150px;\n  height: 150px;\n  margin-right: 1rem;\n  background-color: #f39c12;\n}\n\n.text-wrap {\n  /* Text will wrap around the floated element */\n}",
      "previewHtml": "<div class='float-container' style='background-color: #f0f0f0; padding: 1rem;'>\n  <div class='float-element'></div>\n  <p class='text-wrap'>This text is wrapping around the floated element. Float is used to push elements to the side and allow content to flow around them. It's a fundamental concept in CSS layout, though modern layouts often use Flexbox or Grid for more complex structures.</p>\n</div>",
      "practice": [
        "Create a layout with an image floated to the left and text wrapping around it",
        "Implement a simple two-column layout using float",
        "Practice clearing floats to prevent layout issues"
      ],
      "quiz": [
        {
          "question": "What is the primary behavior of a 'float' element?",
          "options": ["It becomes fixed to the viewport", "It's removed from the document flow and shifted to the left or right", "It expands to fill its container", "It centers itself within its container"],
          "correctAnswer": 1
        },
        {
          "question": "Which values can the 'float' property accept?",
          "options": ["top, bottom, center, justify", "left, right, none, inherit", "inline, block, inline-block, flex", "auto, initial, unset, revert"],
          "correctAnswer": 1
        },
        {
          "question": "What is a common technique to clear floats and prevent layout issues?",
          "options": ["Using 'clear: both;' on the container", "Setting 'overflow: hidden;' on the floated element", "Using 'display: block;' on the parent", "Applying 'position: static;' to the floated element"],
          "correctAnswer": 0
        },
        {
          "question": "Does a floated element occupy space in the normal document flow?",
          "options": ["Yes, it occupies the same space as a non-floated element.", "No, it is removed from the normal document flow.", "Only if it has width and height set.", "Only in certain browsers."],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS property is used to prevent an element from flowing alongside floated elements?",
          "options": ["float-clear", "clear", "flow-break", "avoid-float"],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-float {\n  float: right;\n  width: 80px;\n  height: 80px;\n  background-color: #e74c3c;\n  margin-left: 1rem;\n  /* Try changing float to 'left' or 'none' */\n}",
          "result": "Element floated to the right with text wrapping around"
        },
        {
          "code": ".image-float-left {\n  float: left;\n  margin-right: 1rem;\n  width: 150px;\n  height: auto;\n}\n\n.text-around-float {\n  /* Text will wrap around the floated image */\n}",
          "result": "Image floated to the left with text wrapping around it"
        },
        {
          "code": ".multicolumn-float-layout {\n  width: 400px;\n  overflow: auto; /* Clearfix for container */\n}\n\n.column-float {\n  float: left;\n  width: 50%;\n  padding: 1rem;\n  box-sizing: border-box;\n}",
          "result": "Simple two-column layout created using float (requires container clearing)"
        }
      ],
      "keyPoints": [
        "Positions element to the left or right within its container.",
        "Allows text and inline elements to wrap around floated elements.",
        "Historically used for layouts, now less common for main layouts, but still relevant for text wrapping.",
        "Requires clearing techniques (clearfix, overflow: auto/hidden, clear property) to prevent layout problems.",
        "Float values are `left`, `right`, `none`, `inherit`.",
        "Floated elements are removed from the normal document flow.",
        "Understanding float is helpful for maintaining legacy code and specific layout scenarios."
      ]
    },
    {
      "id": "css-attribute-selectors",
      "technology": "css",
      "category": "selectors",
      "title": "CSS Attribute Selectors",
      "description": "Target HTML elements based on their attributes and attribute values using CSS attribute selectors",
      "difficulty": "beginner",
      "explanation": "CSS Attribute Selectors provide a powerful and flexible way to target HTML elements based on their attributes and attribute values, without relying on classes or IDs. They allow for more semantic and structural styling, enabling you to apply styles based on the inherent properties of HTML elements as defined in the markup. Attribute selectors offer various matching patterns for attribute values, including:  * **Presence of Attribute**: `[attribute]` - Selects elements that have the specified attribute, regardless of its value. * **Exact Value Match**: `[attribute=\"value\"]` - Selects elements where the attribute value is exactly equal to the specified \"value\". * **Value Containment**:  * `[attribute~=\"value\"]` - Selects elements where the attribute value is a space-separated list of words, and one of those words is exactly \"value\". * `[attribute*=\"value\"]` - Selects elements where the attribute value contains the substring \"value\" anywhere within it. * **Value Start and End**:  * `[attribute^=\"value\"]` - Selects elements where the attribute value begins with the substring \"value\". * `[attribute$=\"value\"]` - Selects elements where the attribute value ends with the substring \"value\". * **Value Prefix/Language**: `[attribute|=\"value\"]` - Selects elements where the attribute value is exactly \"value\" or begins with \"value-\" (used for language codes).  Attribute selectors can be combined with other selectors (element selectors, class selectors, etc.) for more specific targeting. They are particularly useful for:  * Styling form elements based on their `type`, `required`, `disabled`, or other attributes. * Targeting links based on their `href` attribute (e.g., external links, mailto links). * Styling elements with specific `data-*` attributes for component-based styling or JavaScript interactions. * Enhancing semantic styling by leveraging HTML attributes without adding extra classes just for styling purposes. * Creating more maintainable CSS by targeting elements based on their structural role rather than presentation-specific classes.  CSS Attribute Selectors offer a versatile and semantic approach to styling, allowing you to write more expressive and maintainable stylesheets by leveraging the inherent structure and attributes of HTML elements.",
      "example": "/* Selects all links with a 'title' attribute */\na[title] {\n  color: #3498db;\n  text-decoration: none;\n}\n\n/* Selects inputs of type 'password' */\ninput[type='password'] {\n  border: 1px solid red;\n}\n\n/* Selects links where href starts with 'https' */\na[href^='https'] {\n  padding-right: 15px;\n  background-image: url('external-link-icon.png'); /* Replace with icon URL */\n  background-repeat: no-repeat;\n  background-position: center right;\n}",
      "previewHtml": "<a href='#' title='Link with title' style='display: block;'>Link with Title</a>\n<a href='https://www.example.com' style='display: block;'>External HTTPS Link</a>\n<input type='text' placeholder='Text Input' style='display: block; margin-bottom: 0.5rem;'>\n<input type='password' placeholder='Password Input' style='display: block;'>",
      "practice": [
        "Style all images that have an 'alt' attribute",
        "Change the color of links with 'target=\"_blank\"'",
        "Target form elements based on their 'required' or 'disabled' attributes"
      ],
      "quiz": [
        {
          "question": "Which selector targets elements that have a specific attribute, regardless of its value?",
          "options": ["element[attribute]", "element.attribute", "element#attribute", "element > attribute"],
          "correctAnswer": 0
        },
        {
          "question": "What does 'element[attribute=\"value\"]' selector target?",
          "options": ["Elements where attribute value contains 'value'", "Elements where attribute value starts with 'value'", "Elements where attribute value is exactly 'value'", "Elements with attribute named 'value'"],
          "correctAnswer": 2
        },
        {
          "question": "Which attribute selector checks if an attribute value starts with a specific string?",
          "options": ["[attribute*=\"value\"]", "[attribute$=\"value\"]", "[attribute~=\"value\"]", "[attribute^=\"value\"]"],
          "correctAnswer": 3
        },
        {
          "question": "Which selector targets elements with the 'data-theme' attribute set to 'dark'?",
          "options": ["[data-theme]", "[data-theme=dark]", "[data-theme~=dark]", "[data-theme*='dark']"],
          "correctAnswer": 1
        },
        {
          "question": "What is the difference between `[attribute~=\"value\"]` and `[attribute*=\"value\"]`?",
          "options": ["`~=` checks for exact word match, `*=` checks for substring anywhere in the value", "`*=` checks for exact word match, `~=` checks for substring anywhere in the value", "They are interchangeable, both do the same thing.", "`~=` is for numbers, `*=` is for strings."],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": "input[type='checkbox'].interactive-attribute {\n  /* Style checkboxes with attribute selector */\n  margin-right: 0.5rem;\n}\n\nlabel.interactive-attribute {\n  font-weight: bold;\n}",
          "result": "Styled checkbox and label using attribute selectors"
        },
        {
          "code": "a[target='_blank'] {\n  color: darkblue;\n  font-weight: bold;\n  /* Style external links (opening in new tab) */\n}",
          "result": "Styling external links with 'target=\"_blank\"' attribute"
        },
        {
          "code": "img[alt] {\n  border: 2px solid lightgreen;\n  /* Style images that have an 'alt' attribute (for accessibility) */\n}",
          "result": "Styling images based on the presence of the 'alt' attribute"
        }
      ],
      "keyPoints": [
        "Select elements based on the presence or value of their HTML attributes.",
        "Types of attribute selectors: presence, exact value, substring match (starts with, ends with, contains, word match, prefix/language).",
        "Selectors: `[attribute]`, `[attribute=\"value\"]`, `[attribute*=\"value\"]`, `[attribute^=\"value\"]`, `[attribute$=\"value\"]`, `[attribute~=\"value\"]`, `[attribute|=\"value\"]`.",
        "Powerful for semantic styling, targeting form elements, links, data attributes, and more.",
        "Enhance CSS maintainability by leveraging HTML structure without adding extra classes or IDs.",
        "Attribute selectors are versatile and can be combined with other selectors for refined targeting.",
        "Promote cleaner and more semantic CSS by using attribute selectors effectively."
      ]
    },
    {
      "id": "css-box-shadow-text-shadow",
      "technology": "css",
      "category": "effects",
      "title": "CSS Box Shadow and Text Shadow",
      "description": "Add depth and visual interest to elements and text using CSS box-shadow and text-shadow properties",
      "difficulty": "beginner",
      "explanation": "CSS Box Shadow and Text Shadow properties are invaluable for adding depth, dimension, and visual interest to web elements and text. They allow you to create shadow effects that can enhance the user interface, highlight elements, improve visual hierarchy, and add subtle or dramatic visual flair.  **CSS Box Shadow** (`box-shadow`) is used to add shadow effects to the rectangular boxes of HTML elements. It can create outset (shadow outside the box) or inset (shadow inside the box) shadows and supports multiple shadows on a single element. The `box-shadow` property accepts several values, typically in this order:  * `offset-x`: Horizontal offset of the shadow (positive values move shadow to the right, negative to the left). * `offset-y`: Vertical offset of the shadow (positive values move shadow down, negative up). * `blur-radius`: Blur radius of the shadow (larger values create more blur, 0 for no blur - hard shadow edge). * `spread-radius` (optional): Spread radius of the shadow (positive values expand the shadow, negative values shrink it). * `color`: Color of the shadow. * `inset` (optional keyword): If present, creates an inset shadow (shadow inside the box).  **CSS Text Shadow** (`text-shadow`) is used to add shadow effects specifically to text content. It's similar to `box-shadow` but applies to text glyphs. `text-shadow` can also accept multiple shadows, creating layered or more complex text shadow effects. The `text-shadow` property values are:  * `offset-x`: Horizontal offset of the shadow. * `offset-y`: Vertical offset of the shadow. * `blur-radius` (optional): Blur radius of the shadow. * `color`: Color of the shadow.  Both `box-shadow` and `text-shadow` are versatile and can be used for:  * Subtle depth: Adding slight shadows to elements to make them appear slightly raised or to separate them from the background, enhancing visual hierarchy. * Highlight effects: Using more pronounced shadows to draw attention to important elements like buttons, cards, or interactive UI components. * 3D effects: Combining offsets and blur to simulate depth and 3D appearance. * Text emphasis: Using text shadows to make headings or important text stand out. * Decorative effects: Creating artistic or stylistic shadow effects for visual appeal.  Experimenting with different values for offsets, blur radius, spread radius, and colors can create a wide range of shadow styles, from subtle and realistic to bold and stylized, enhancing the visual richness of your web designs.",
      "example": ".box-shadow-example {\n  width: 150px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  box-shadow: 5px 5px 10px #888888; /* Horizontal offset, vertical offset, blur radius, color */\n  padding: 1rem;\n}\n\n.text-shadow-example {\n  font-size: 2rem;\n  color: #333;\n  text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.5); /* Horizontal offset, vertical offset, blur radius, color */\n}",
      "previewHtml": "<div class='box-shadow-example'>Box with Shadow</div>\n<p class='text-shadow-example'>Text with Shadow</p>",
      "practice": [
        "Create different types of box shadows: outset, inset, multiple shadows",
        "Apply subtle text shadows to headings for better readability",
        "Experiment with shadow colors, blur radii, and offsets"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to add shadows to HTML elements?",
          "options": ["shadow", "element-shadow", "box-shadow", "css-shadow"],
          "correctAnswer": 2
        },
        {
          "question": "What are the first two values in 'box-shadow: 5px 5px 10px black;' typically representing?",
          "options": ["Blur radius and spread radius", "Horizontal offset and vertical offset", "Shadow color and blur radius", "Spread radius and shadow color"],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS property is used to add shadows specifically to text?",
          "options": ["text-effect", "font-shadow", "text-shadow", "shadow-text"],
          "correctAnswer": 2
        },
        {
          "question": "What does the 'blur-radius' value in 'box-shadow' control?",
          "options": ["Shadow color", "Shadow offset", "Shadow blur intensity", "Shadow spread"],
          "correctAnswer": 2
        },
        {
          "question": "How do you create an inset box shadow?",
          "options": ["Using 'inset' keyword in 'box-shadow' property", "Using 'inner-shadow' property", "Setting negative offset values", "Using 'box-shadow: inner ...'"],
          "correctAnswer": 0
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-shadow {\n  width: 100px;\n  height: 100px;\n  background-color: #8e44ad;\n  /* Try changing shadow values: offset, blur, color */\n  box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.7);\n  transition: box-shadow 0.3s ease;\n}\n\n.interactive-shadow:hover {\n  box-shadow: 6px 6px 8px rgba(0, 0, 0, 0.9);\n}",
          "result": "Box with interactive box-shadow on hover"
        },
        {
          "code": ".inset-box-shadow-example {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5); /* Inset shadow */\n  padding: 1rem;\n}",
          "result": "Element with an inset box shadow creating a pushed-in effect"
        },
        {
          "code": ".multiple-text-shadow-example {\n  font-size: 3rem;\n  color: white;\n  text-shadow: 2px 2px 0 black, 4px 4px 0 darkred; /* Multiple text shadows */\n  text-align: center;\n}",
          "result": "Text with multiple layered text shadows for a more dramatic effect"
        }
      ],
      "keyPoints": [
        "Add shadow effects to boxes using `box-shadow` and text using `text-shadow` properties.",
        "Properties: `box-shadow`, `text-shadow`.",
        "Parameters for both: horizontal offset, vertical offset, blur radius, color.",
        "`box-shadow` also has optional `spread-radius` and `inset` keyword.",
        "Enhance depth, visual interest, and hierarchy of elements and text.",
        "Use for subtle depth, highlight effects, 3D simulations, and text emphasis.",
        "Experiment with different shadow values to create a wide range of visual styles."
      ]
    },
    {
      "id": "css-gradients-deep-dive",
      "technology": "css",
      "category": "styling",
      "title": "CSS Gradients Deep Dive (Linear, Radial, Conic)",
      "description": "Explore different types of CSS gradients: linear, radial, and conic, for creating rich background effects",
      "difficulty": "intermediate",
      "explanation": "CSS Gradients are a powerful feature that allows you to create smooth transitions between two or more colors, generating visually rich and dynamic backgrounds, borders, and even text effects directly within CSS. They eliminate the need for image-based gradients, leading to lighter and more scalable web designs. CSS offers three primary types of gradients: Linear, Radial, and Conic, each with unique characteristics and use cases.  **1. Linear Gradients**:  Create a color transition along a straight line. Defined using the `linear-gradient()` function. Key parameters include:  * **Direction**: Specifies the direction of the gradient line. Can be defined using keywords like `to top`, `to bottom`, `to right`, `to left`, `to top right`, `to bottom left`, or angles (e.g., `45deg`, `90deg`). Default direction is `to bottom`. * **Color Stops**: Define the colors and their positions along the gradient line. Color stops are specified as color values followed by optional position percentages (e.g., `red 0%`, `yellow 50%`, `green 100%`). If positions are not specified, they are automatically distributed evenly.  **2. Radial Gradients**:  Create a color transition radiating outwards from a center point. Defined using the `radial-gradient()` function. Key parameters include:  * **Shape**: Defines the shape of the gradient (`circle` or `ellipse`). Default is `ellipse`. * **Size**: Specifies the size of the gradient. Can be keywords like `closest-side`, `farthest-side`, `closest-corner`, `farthest-corner`, or specific dimensions. Default is `farthest-corner`. * **Position**: Sets the center point of the gradient using keywords (e.g., `center`, `top left`, `bottom right`) or percentages. Default is `center`. * **Color Stops**: Similar to linear gradients, define colors and their positions radiating from the center.  **3. Conic Gradients**:  Create a color transition rotating around a center point, like a color wheel or pie chart. Defined using the `conic-gradient()` function. Key parameters include:  * **Starting Angle (optional)**: Specifies the starting angle of the gradient rotation (e.g., `from 90deg`). Default is `0deg`. * **Position**: Sets the center point of the gradient rotation. Default is `center`. * **Color Stops**: Define colors and their angular positions around the center point (e.g., `red 0deg`, `yellow 90deg`, `green 180deg`, `blue 270deg`).  All gradient types support:  * **Color Interpolation**: Browsers smoothly interpolate colors between color stops, creating seamless gradients. * **Repeating Gradients**: `repeating-linear-gradient()`, `repeating-radial-gradient()`, `repeating-conic-gradient()` functions allow you to repeat gradient patterns, creating striped or patterned backgrounds. * **Transparency**: Gradients can include transparent or semi-transparent colors (using `rgba()` or `hsla()`), enabling layered effects and overlays.  CSS Gradients are incredibly versatile and are used extensively for creating visually appealing backgrounds, buttons, borders, progress bars, and various design elements in modern web design. They offer a declarative and performant way to achieve rich visual effects without relying on raster images.",
      "example": ".linear-gradient-box {\n  background-image: linear-gradient(to right, red, yellow);\n  height: 100px;\n}\n\n.radial-gradient-box {\n  background-image: radial-gradient(circle, red, yellow, green);\n  height: 150px;\n}\n\n.conic-gradient-box {\n  background-image: conic-gradient(from 90deg, red, yellow, green, blue);\n  height: 150px;\n}",
      "previewHtml": "<div class='linear-gradient-box' style='width: 100%;'>Linear Gradient</div>\n<div class='radial-gradient-box' style='width: 100%;'>Radial Gradient</div>\n<div class='conic-gradient-box' style='width: 100%;'>Conic Gradient</div>",
      "practice": [
        "Create linear gradients with different angles and color stops",
        "Experiment with radial gradients to create spotlight or circular effects",
        "Design pie charts or color wheels using conic gradients",
        "Combine gradients with background properties for complex effects"
      ],
      "quiz": [
        {
          "question": "How many main types of CSS gradients are there?",
          "options": ["2", "3", "4", "5"],
          "correctAnswer": 1
        },
        {
          "question": "Which type of gradient creates a color transition along a straight line?",
          "options": ["Radial gradient", "Conic gradient", "Linear gradient", "Repeating gradient"],
          "correctAnswer": 2
        },
        {
          "question": "Which gradient type is best suited for creating pie chart like backgrounds?",
          "options": ["Linear gradient", "Radial gradient", "Conic gradient", "Repeating linear gradient"],
          "correctAnswer": 2
        },
        {
          "question": "What is the default direction of a linear gradient if no direction is specified?",
          "options": ["to top", "to bottom", "to right", "to left"],
          "correctAnswer": 1
        },
        {
          "question": "Which function creates repeating patterns of linear gradients?",
          "options": ["linear-gradient()", "radial-gradient()", "conic-gradient()", "repeating-linear-gradient()"],
          "correctAnswer": 3
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-gradient {\n  height: 120px;\n  /* Try changing gradient type and color stops */\n  background-image: radial-gradient(ellipse farthest-corner at top left, #3498db, #e67e22);\n}",
          "result": "Element with interactive radial gradient"
        },
        {
          "code": ".linear-gradient-angle {\n  background-image: linear-gradient(45deg, blue, green);\n  height: 100px;\n  /* Try changing the angle value */\n}",
          "result": "Linear gradient with a 45-degree angle"
        },
        {
          "code": ".conic-pie-chart {\n  background-image: conic-gradient(red 0% 25%, yellow 25% 50%, green 50% 75%, blue 75% 100%);\n  border-radius: 50%;\n  width: 150px;\n  height: 150px;\n}",
          "result": "Conic gradient creating a pie chart effect"
        }
      ],
      "keyPoints": [
        "Three main types of CSS gradients: linear, radial, conic.",
        "Linear gradients create straight-line color transitions.",
        "Radial gradients radiate colors from a center point.",
        "Conic gradients rotate colors around a center point.",
        "Use `linear-gradient()`, `radial-gradient()`, `conic-gradient()` functions to define gradients.",
        "Repeating gradients (`repeating-linear-gradient()`, etc.) create patterned backgrounds.",
        "Gradients are versatile for backgrounds, borders, buttons, and various visual effects, offering a performant alternative to images."
      ]
    },
    {
      "id": "css-counters",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Counters",
      "description": "Automatically number and customize lists or elements using CSS counters",
      "difficulty": "intermediate",
      "explanation": "CSS Counters are a powerful feature that allows you to automatically number elements on a webpage using CSS, without needing to manually insert numbers into your HTML or use JavaScript. Counters are essentially variables maintained by CSS, which you can increment and display using CSS properties and functions. They are particularly useful for numbering headings, list items, sections, or any sequence of elements that needs automatic numbering.  Key CSS counter properties and functions:  * `counter-reset`: Initializes or resets a counter to a specific value (default is 0). It's typically used on a parent element to start or reset a counter for its descendants. Syntax: `counter-reset: counter-name [initial-value]`. You can reset multiple counters by listing them separated by spaces. * `counter-increment`: Increments the value of a counter each time it is encountered on an element. Syntax: `counter-increment: counter-name [increment-value]`. Default increment value is 1. You can increment multiple counters or decrement counters using negative values. * `counter()`: Function used to display the *current* value of a counter. It is typically used with pseudo-elements (`::before` or `::after`) and the `content` property to insert the counter value into the document. Syntax: `counter(counter-name, style)`. The optional `style` argument specifies the counter style (e.g., `decimal`, `lower-roman`, `lower-alpha`, etc.; default is `decimal`). * `counters()`: Similar to `counter()`, but used for nested counters. It displays a string of nested counter values, typically separated by a specified string. Syntax: `counters(counter-name, separator, style)`. Useful for hierarchical numbering (e.g., 1, 1.1, 1.1.1).  CSS Counters are beneficial for:  * Automatic numbering of headings, sections, or articles: Dynamically number headings (H1, H2, H3, etc.) or sections within a document without manually updating numbers in HTML. * Customizing list numbering: Create numbered lists with custom numbering styles beyond the default list styles, or for numbering elements that are not list items (`<li>`). * Generating table of contents or indices: Automatically generate numbered lists for table of contents or indices based on document structure. * Dynamic numbering in dynamic content: Counters update automatically even when content is dynamically added or removed, ensuring consistent numbering. * Styling and formatting numbering: CSS counters allow for significant customization of numbering styles, formats, and prefixes/suffixes using CSS properties and pseudo-elements.  CSS Counters provide a declarative and efficient way to handle automatic numbering in web documents, enhancing content organization and visual presentation without relying on scripting.",
      "example": "body {\n  counter-reset: section; /* Reset counter 'section' on body */\n}\n\nh2::before {\n  counter-increment: section; /* Increment 'section' counter before each h2 */\n  content: 'Section ' counter(section) ': '; /* Display counter value */\n  font-weight: bold;\n}",
      "previewHtml": "<body>\n  <h2>Introduction</h2>\n  <p>...</p>\n  <h2>Main Content</h2>\n  <p>...</p>\n  <h2>Conclusion</h2>\n  <p>...</p>\n</body>",
      "practice": [
        "Number headings sequentially using CSS counters",
        "Create nested lists with hierarchical numbering (e.g., 1, 1.1, 1.1.1)",
        "Customize counter styles (e.g., Roman numerals, letters)"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to initialize or reset a counter?",
          "options": ["counter-start", "reset-counter", "counter-reset", "init-counter"],
          "correctAnswer": 2
        },
        {
          "question": "Which CSS property increments the value of a counter?",
          "options": ["counter-increase", "increment-counter", "counter-step", "counter-increment"],
          "correctAnswer": 3
        },
        {
          "question": "Which CSS function is used to display the value of a counter?",
          "options": ["get-counter()", "counter-value()", "show-counter()", "counter()"],
          "correctAnswer": 3
        },
        {
          "question": "How do you create a nested counter for hierarchical numbering (e.g., 1, 1.1, 1.1.1)?",
          "options": ["Using 'counter()' function multiple times", "Using 'counters()' function", "Using nested 'counter-reset'", "Using 'counter-level' property"],
          "correctAnswer": 1
        },
        {
          "question": "What is the default counter style if not specified in 'counter()' function?",
          "options": ["lower-roman", "upper-alpha", "decimal", "none"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": "ol {\n  counter-reset: list-item;\n  list-style: none;\n  padding-left: 0;\n}\n\nol li::before {\n  counter-increment: list-item;\n  content: counter(list-item) '. ';\n  display: inline-block;\n  width: 1.5em;\n  text-align: right;\n}",
          "result": "Numbered list using CSS counters"
        },
        {
          "code": "body {\n  counter-reset: section;\n}\n\nh2 {\n  counter-increment: section;\n}\n\nh2::before {\n  content: 'Section ' counter(section, upper-roman) ': ';\n  font-weight: bold;\n}",
          "result": "Numbering headings using CSS counters with Roman numerals"
        },
        {
          "code": "ol.nested-list {\n  counter-reset: item;\n  list-style: none;\n  padding-left: 0;\n}\n\nol.nested-list li {\n  counter-increment: item;\n}\n\nol.nested-list li::before {\n  content: counters(item, '.') '. ';\n  display: inline-block;\n  width: 3em;\n  text-align: right;\n}",
          "result": "Nested list with hierarchical numbering using 'counters()'"
        }
      ],
      "keyPoints": [
        "Automatically number elements using CSS without manual HTML numbering.",
        "Key properties: `counter-reset`, `counter-increment`.",
        "Functions: `counter()`, `counters()` for displaying counter values.",
        "`counter-reset` initializes or resets a counter; `counter-increment` increases its value.",
        "`counter()` displays the current counter value; `counters()` for nested counter values.",
        "Customize numbering styles, formats, prefixes, and suffixes using CSS.",
        "Useful for numbering headings, sections, lists, and dynamic content, enhancing organization and presentation."
      ]
    },
    {
      "id": "css-grid-areas",
      "technology": "css",
      "category": "layout",
      "title": "CSS Grid Named Areas",
      "description": "Simplify complex grid layouts using CSS Grid named areas for intuitive structure",
      "difficulty": "intermediate",
      "explanation": "CSS Grid Named Areas are a feature within CSS Grid Layout that dramatically simplifies the creation and understanding of complex grid structures. Instead of relying solely on grid line numbers to place items, named areas allow you to define semantic regions within your grid and then assign elements to these named areas. This approach makes your grid layouts more intuitive, readable, and maintainable, especially for layouts with intricate designs.  To use named areas, you first define them within the `grid-template-areas` property of the grid container. The value of `grid-template-areas` is a string of rows, where each row is a string of area names (or periods `.` for empty cells) representing the columns. Area names are quoted strings, and rows are separated by line breaks (typically for readability in code, though spaces also work).  Example structure for `grid-template-areas`:  ```css .grid-container {   grid-template-areas:     'header header header'     'sidebar content content'     'footer footer footer'; } ```  In this example, we've defined three rows and three columns. The first row is entirely named 'header', the second row has 'sidebar' in the first column and 'content' in the next two, and the last row is all 'footer'.  Once you've defined your grid areas, you assign grid items to these areas using the `grid-area` property on the grid items themselves. The value of `grid-area` should match one of the names you defined in `grid-template-areas`.  Example assignment:  ```css .header-element { grid-area: header; } .sidebar-element { grid-area: sidebar; } .content-element { grid-area: content; } .footer-element { grid-area: footer; } ```  Key benefits of using CSS Grid Named Areas:  * **Readability and Maintainability**: Named areas make the grid layout structure visually clear directly in the CSS, improving readability and making it easier to understand and maintain complex layouts. * **Semantic Structure**: Using meaningful names for grid areas (like 'header', 'sidebar', 'content', 'nav') enhances the semantic value of your CSS and makes it more self-documenting. * **Simplified Layout Modifications**: Changing the layout structure becomes as simple as rearranging the area names within the `grid-template-areas` string, without needing to recalculate or adjust grid line numbers. * **Responsive Layouts**: Named areas are highly effective for responsive design. You can redefine `grid-template-areas` within media queries to completely restructure your layout for different screen sizes, offering a powerful way to adapt layouts responsively. * **Visual Layout in CSS**: `grid-template-areas` provides a visual representation of your layout directly in the CSS code, making it easier to visualize and plan complex grid structures.  CSS Grid Named Areas are a powerful tool for simplifying complex grid layouts, enhancing code clarity, and streamlining the process of creating and maintaining sophisticated web layouts.",
      "example": ".grid-container-areas {\n  display: grid;\n  grid-template-areas:\n    'header header header'\n    'sidebar content content'\n    'footer footer footer';\n  grid-template-columns: 200px 1fr 1fr;\n  grid-gap: 1rem;\n}\n\n.header-area { grid-area: header; background-color: #3498db; color: white; padding: 1rem; }\n.sidebar-area { grid-area: sidebar; background-color: #f0f0f0; padding: 1rem; }\n.content-area { grid-area: content; background-color: #e0e0e0; padding: 1rem; }\n.footer-area { grid-area: footer; background-color: #7f8c8d; color: white; padding: 1rem; text-align: center;}",
      "previewHtml": "<div class='grid-container-areas' style='min-height: 300px;'>\n  <div class='header-area'>Header</div>\n  <div class='sidebar-area'>Sidebar</div>\n  <div class='content-area'>Content</div>\n  <div class='footer-area'>Footer</div>\n</div>",
      "practice": [
        "Layout a typical website structure (header, nav, main, sidebar, footer) using grid areas",
        "Create responsive grid layouts by redefining grid areas in media queries",
        "Experiment with overlapping grid areas for more complex designs"
      ],
      "quiz": [
        {
          "question": "Which CSS property is used to define named areas in CSS Grid?",
          "options": ["grid-areas", "grid-template-regions", "grid-named-areas", "grid-template-areas"],
          "correctAnswer": 3
        },
        {
          "question": "How do you assign a named area to a grid item?",
          "options": ["grid-area-name", "item-grid-area", "grid-item-area", "grid-area"],
          "correctAnswer": 3
        },
        {
          "question": "In 'grid-template-areas', what do periods '.' represent?",
          "options": ["Grid lines", "Empty grid cells", "Area names", "Column tracks"],
          "correctAnswer": 1
        },
        {
          "question": "Can grid areas overlap in CSS Grid Layout?",
          "options": ["Yes, grid areas can overlap.", "No, grid areas cannot overlap.", "Only in specific cases.", "Overlapping is allowed but not recommended."],
          "correctAnswer": 0
        },
        {
          "question": "How do you redefine grid areas for different screen sizes in responsive design?",
          "options": ["Using JavaScript to modify grid-template-areas", "By changing grid-template-areas within CSS media queries", "By using container queries instead", "Grid areas cannot be redefined responsively."],
          "correctAnswer": 1
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-grid-area-container {\n  display: grid;\n  grid-template-areas:\n    'a a b'\n    'c d b'\n    'c d d';\n  grid-template-columns: repeat(3, 1fr);\n  gap: 0.5rem;\n}\n\n.area-a { grid-area: a; background-color: lightcoral; }\n.area-b { grid-area: b; background-color: lightblue; }\n.area-c { grid-area: c; background-color: lightgreen; }\n.area-d { grid-area: d; background-color: lightsalmon; }",
          "result": "Grid layout using named areas for structure"
        },
        {
          "code": ".responsive-grid-areas-example {\n  display: grid;\n  grid-template-areas:\n    'header header header'\n    'sidebar content content'\n    'footer footer footer';\n  grid-template-columns: 200px 1fr 1fr;\n  gap: 1rem;\n}\n\n@media (max-width: 768px) {\n  .responsive-grid-areas-example {\n    grid-template-areas:\n      'header'\n      'content'\n      'sidebar'\n      'footer';\n    grid-template-columns: 1fr;\n  }\n}",
          "result": "Responsive grid layout with grid areas redefined in a media query"
        },
        {
          "code": ".overlapping-grid-areas {\n  display: grid;\n  grid-template-areas:\n    'overlap main main'\n    'overlap main main'\n    'sidebar main main';\n  grid-template-columns: 150px 1fr 1fr;\n  gap: 1rem;\n}\n\n.overlap-area { grid-area: overlap; background-color: rgba(255, 0, 0, 0.5); }\n.sidebar-area { grid-area: sidebar; background-color: rgba(0, 255, 0, 0.5); }\n.main-area { grid-area: main; background-color: rgba(0, 0, 255, 0.5); }",
          "result": "Example of overlapping grid areas for more complex layout structures"
        }
      ],
      "keyPoints": [
        "Define layout structure with semantic named areas in CSS Grid.",
        "Property: `grid-template-areas` for defining areas, `grid-area` for assigning items.",
        "Use quoted strings to name areas in `grid-template-areas`, periods '.' for empty cells.",
        "Semantic and highly readable grid layouts, improving maintainability.",
        "Simplify complex grid structures and layout modifications.",
        "Redefine `grid-template-areas` in media queries for powerful responsive layouts.",
        "Enhance CSS Grid's intuitiveness and make layout code more self-documenting."
      ]
    },
    {
      "id": "css-custom-media",
      "technology": "css",
      "category": "responsive",
      "title": "CSS Custom Media Queries",
      "description": "Define reusable and semantic media query names using CSS custom media queries",
      "difficulty": "advanced",
      "explanation": "CSS Custom Media Queries are a valuable feature that enhances the organization and maintainability of your CSS, particularly in responsive design. They allow you to define reusable, semantic names for your media queries, similar to how CSS Custom Properties (variables) work for values. Instead of repeating the same media query conditions throughout your stylesheets, you can define them once with a descriptive name and then reference that name in your media rules.  You define custom media queries using the `@custom-media` at-rule, followed by the custom media query name (prefixed with `--`) and the media query condition.  Syntax:  ```css @custom-media --media-query-name media-query-condition; ```  For example, you can define breakpoints for different viewport sizes:  ```css @custom-media --viewport-small (max-width: 600px); @custom-media --viewport-medium (min-width: 601px) and (max-width: 1200px); @custom-media --viewport-large (min-width: 1201px); ```  Once defined, you can use these custom media query names within `@media` rules, referencing them within parentheses, like variables.  Using custom media query in a media rule:  ```css @media (--viewport-medium) {   /* Styles to apply for medium viewports */   .element {     font-size: 1.2rem;   } } ```  Benefits of using CSS Custom Media Queries:  * **Improved Readability**: Semantic names (like `--viewport-medium` or `--breakpoint-tablet`) make your media queries more descriptive and easier to understand compared to raw media query conditions (like `(min-width: 768px)`). * **Enhanced Maintainability**: If you need to change a breakpoint value, you only need to update it in one place (the `@custom-media` definition) instead of searching and replacing it across your stylesheets, reducing errors and improving maintainability. * **Code Reusability**: Custom media queries promote code reuse. You define a breakpoint once and reuse its name throughout your CSS, avoiding repetition and keeping your code DRY (Don't Repeat Yourself). * **Abstraction of Breakpoints**: They abstract away the specific pixel values of breakpoints, allowing you to think in terms of semantic names (small, medium, large viewports) rather than pixel widths, which can make your CSS more conceptually clear. * **Centralized Breakpoint Management**: `@custom-media` rules typically reside at the top of your CSS files, providing a centralized location for managing and updating all your responsive breakpoints.  CSS Custom Media Queries are a valuable tool for creating more organized, maintainable, and semantically clear CSS for responsive web design, especially in larger projects with numerous breakpoints and media queries.",
      "example": "@custom-media --viewport-medium (min-width: 768px);\n\n.element {\n  font-size: 1rem;\n}\n\n@media (--viewport-medium) {\n  .element {\n    font-size: 1.2rem; /* Styles applied for medium viewports and above */\n  }\n}",
      "previewHtml": "<div class='element' style='font-size: 1rem;'>\n  Text that changes size based on custom media query\n</div>",
      "practice": [
        "Define custom media queries for different breakpoint ranges (small, medium, large)",
        "Use custom media queries to manage typography and layout responsiveness",
        "Refactor existing media queries to use custom media queries for better organization"
      ],
      "quiz": [
        {
          "question": "What is the purpose of CSS custom media queries?",
          "options": ["To create custom animations", "To define reusable media query names", "To style custom HTML elements", "To create container queries"],
          "correctAnswer": 1
        },
        {
          "question": "Which at-rule is used to define a custom media query?",
          "options": ["@media-define", "@custom-query", "@define-media", "@custom-media"],
          "correctAnswer": 3
        },
        {
          "question": "How do you reference a custom media query in a media rule?",
          "options": ["@media custom-name", "@media var(--custom-name)", "@media(--custom-name)", "@media apply(--custom-name)"],
          "correctAnswer": 2
        },
        {
          "question": "What is the naming convention for custom media query names?",
          "options": ["CamelCase", "snake_case", "prefixed with '$'", "prefixed with '--'"],
          "correctAnswer": 3
        },
        {
          "question": "What is the primary benefit of using custom media queries for maintainability?",
          "options": ["Improved performance", "Reduced CSS file size", "Centralized breakpoint definitions", "Enhanced browser compatibility"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": "@custom-media --small-viewport (max-width: 600px);\n\nbody {\n  font-size: 16px;\n}\n\n@media (--small-viewport) {\n  body {\n    font-size: 14px; /* Smaller font for small viewports */\n  }\n}",
          "result": "Font size changes based on a custom media query breakpoint"
        },
        {
          "code": "@custom-media --tablet-viewport (min-width: 768px) and (max-width: 992px);\n\n.card {\n  padding: 1rem;\n}\n\n@media (--tablet-viewport) {\n  .card {\n    padding: 1.5rem; /* Increased padding for tablet viewports */\n  }\n}",
          "result": "Card padding adjusted for tablet viewports using a custom media query"
        },
        {
          "code": "@custom-media --large-viewport (min-width: 993px);\n\n.container {\n  max-width: 1200px;\n}\n\n@media (--large-viewport) {\n  .container {\n    max-width: 1400px; /* Wider container on large viewports */\n  }\n}",
          "result": "Container width adjusted for large viewports using a custom media query"
        }
      ],
      "keyPoints": [
        "Define reusable, named media queries using `@custom-media` at-rule.",
        "Improve media query maintainability and readability with semantic names.",
        "Custom media query names are prefixed with `--` (e.g., `--viewport-medium`).",
        "Reference custom media queries within `@media` rules using `(--custom-name)` syntax.",
        "Centralize breakpoint definitions for easier management and updates.",
        "Enhance code organization and promote DRY (Don't Repeat Yourself) principles in responsive CSS.",
        "Similar to variables for media queries, simplifying responsive design code."
      ]
    },
    {
      "id": "css-font-loading-api",
      "technology": "css",
      "category": "performance",
      "title": "CSS Font Loading API",
      "description": "Control and optimize font loading with CSS Font Loading API for better web performance",
      "difficulty": "advanced",
      "explanation": "The CSS Font Loading API is a JavaScript interface that provides fine-grained control over web font loading and management. It allows developers to programmatically load fonts, monitor their loading status, and react to font load events, enabling advanced font loading strategies for improved web performance and user experience. This API is crucial for addressing issues like Flash Of Invisible Text (FOIT) and Flash Of Unstyled Text (FOUT) that can occur during web font loading.  Key interfaces and functionalities of the CSS Font Loading API:  * **`document.fonts` Interface**: The entry point to the API, accessible via `document.fonts`. It represents the font face set for the current document. * **`document.fonts.load(font-face-string)` Method**: Loads a font face specified by a CSS font descriptor string (e.g., `'italic bold 16px Arial'`, `'url(font.woff2)'`). Returns a Promise that resolves when the font is loaded and ready to use, or rejects if loading fails. * **`document.fonts.check(font-face-string, text)` Method**: Checks if a font face is available for rendering a given text string. Returns a Boolean indicating if the font is available. Useful for pre-checking font availability before applying styles. * **`document.fonts.ready` Promise**: Returns a Promise that resolves when all pending font loads are complete and fonts are ready for layout and rendering. This is ideal for ensuring all custom fonts are loaded before applying styles that depend on them, preventing FOIT/FOUT. * **`FontFace` Constructor**: Allows creating `FontFace` objects in JavaScript, representing font faces that can be loaded and used. * **`FontFaceSet` Interface**: Represents a set of `FontFace` objects and provides methods for managing and interacting with font faces.  Benefits of using CSS Font Loading API for font optimization:  * **Prevent FOIT/FOUT**: By using `document.fonts.ready` promise, you can delay rendering text until custom fonts are fully loaded, eliminating the flash of unstyled or invisible text. * **Prioritize Critical Fonts**: Load critical fonts first to ensure fast rendering of primary content, improving perceived performance. * **Dynamic Font Loading**: Load fonts on demand, only when they are needed, reducing initial page load size and improving performance. * **Font Load Error Handling**: Catch font load errors using Promises and implement fallback strategies or error handling UI. * **Preloading Fonts**: Use `document.fonts.load()` to preload fonts and improve loading speed for subsequent use. * **Control over Font Rendering**: Gain finer control over when and how fonts are applied, enhancing the user experience related to web fonts.  The CSS Font Loading API empowers developers to manage web font loading more effectively, leading to faster, smoother, and more visually stable web experiences, particularly when using custom web fonts.",
      "example": "// JavaScript example\nif ('fonts' in document) {\n  document.fonts.load('italic 1.2em \"MyCustomFont\"').then(function() {\n    // Font is loaded and ready to use\n    document.body.classList.add('fonts-loaded');\n  }).catch(function(error) {\n    console.error('Font failed to load:', error);\n  });\n}",
      "previewHtml": "<div style='font-family: sans-serif;'>\n  Text using custom font (font loading managed by JavaScript)\n</div>\n<!-- Ensure 'MyCustomFont' is defined in CSS @font-face -->",
      "practice": [
        "Implement font loading with Font Loading API to prevent FOIT/FOUT",
        "Preload critical fonts to improve initial render performance",
        "Monitor font loading status and handle errors gracefully",
        "Dynamically apply CSS classes when fonts are loaded"
      ],
      "quiz": [
        {
          "question": "What is the primary purpose of the CSS Font Loading API?",
          "options": ["To define custom fonts in CSS", "To control and optimize font loading with JavaScript", "To replace CSS @font-face rule", "To improve CSS specificity"],
          "correctAnswer": 1
        },
        {
          "question": "Which JavaScript interface is the entry point to the Font Loading API?",
          "options": ["window.fontLoader", "document.loadFonts", "navigator.fonts", "document.fonts"],
          "correctAnswer": 3
        },
        {
          "question": "What does FOIT stand for in web font loading?",
          "options": ["Flash Of Initial Text", "Font Optimization and Integration Tool", "Flash Of Invisible Text", "Font Outline and Interpolation Technique"],
          "correctAnswer": 2
        },
        {
          "question": "Which method of the Font Loading API is used to load a font face?",
          "options": ["document.fonts.check()", "document.fonts.load()", "document.fonts.add()", "document.fonts.register()"],
          "correctAnswer": 1
        },
        {
          "question": "What does the `document.fonts.ready` property return?",
          "options": ["A list of loaded fonts", "A Boolean indicating if fonts are ready", "A Promise that resolves when all fonts are loaded", "The number of fonts loaded"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": "// Conceptual JavaScript example (may not run directly here)\ndocument.fonts.ready.then(() => {\n  console.log('Fonts are ready');\n  // Apply font-dependent styles or classes\n});",
          "result": "Conceptual example of using Font Loading API readiness promise"
        },
        {
          "code": "// Conceptual JavaScript example (may not run directly here)\ndocument.fonts.load('400 1em \"Open Sans\"').then(() => {\n  document.body.style.fontFamily = '\"Open Sans\", sans-serif';\n  console.log('Open Sans font loaded and applied.');\n});",
          "result": "Dynamically loading and applying a font using Font Loading API"
        },
        {
          "code": "// Conceptual JavaScript example (may not run directly here)\nif (document.fonts.check('16px \"MyCustomFont\"')) {\n  console.log('MyCustomFont is already available.');\n} else {\n  document.fonts.load('16px \"MyCustomFont\"').then(() => {\n    console.log('MyCustomFont loaded.');\n  });\n}",
          "result": "Checking font availability before loading using document.fonts.check()"
        }
      ],
      "keyPoints": [
        "JavaScript API for controlling and optimizing web font loading.",
        "Interface: `document.fonts`.",
        "Key methods: `load()`, `check()`, `ready` promise.",
        "Optimize font loading performance and prevent FOIT/FOUT.",
        "Load fonts dynamically, prioritize critical fonts, handle font load errors.",
        "Enhance user experience related to web fonts by ensuring smooth and controlled font rendering.",
        "Essential for modern web development practices focused on performance and visual stability."
      ]
    },
    {
      "id": "css-initial-unset",
      "technology": "css",
      "category": "fundamentals",
      "title": "CSS Initial Value and 'all: unset'",
      "description": "Understand 'initial' and 'unset' keywords and the 'all' property for CSS property reset and inheritance control",
      "difficulty": "beginner",
      "explanation": "CSS Keywords `initial` and `unset`, along with the `all` property, are fundamental tools for managing CSS property values and controlling inheritance. They provide powerful mechanisms for resetting styles, managing cascade layers, and ensuring predictable styling behavior, especially in complex CSS architectures or component-based systems.  * **`initial` Keyword**:  Resets a CSS property to its *specification-defined initial value*. Every CSS property has an initial value, which is defined in the CSS specification. For example, the `color` property's initial value is typically `black`, `background-color` is `transparent`, and `display` is `inline`. Using `initial` forces a property to revert to this default, specification-defined value, regardless of any inherited or cascaded styles.  * **`unset` Keyword**:  Acts more contextually than `initial`. It resets a CSS property to its *inherited value* if the property is naturally inherited from its parent. If the property is *not* naturally inherited, `unset` behaves like `initial` and resets it to its specification-defined initial value. `unset` is particularly useful for dealing with cascade and inheritance in a more nuanced way, respecting the natural inheritance flow where applicable.  * **`all` Property**:  A CSS shorthand property that resets or unsets *all* CSS properties of an element at once. It's incredibly useful for creating CSS resets for specific components or for isolating components from global styles. The `all` property can take several values, but the most relevant in this context are:  * `all: initial`: Resets *all* CSS properties of the element to their specification-defined initial values. * `all: unset`: Resets *all* CSS properties to their inherited values (if inheritable) or to their initial values (if non-inheritable).  Understanding the difference between `initial` and `unset` is key: `initial` always resets to the specification-defined default, while `unset` is context-aware, respecting inheritance where it naturally occurs and falling back to `initial` where it doesn't. The `all` property, combined with `initial` or `unset`, provides a powerful way to broadly manage and reset styles, enhancing CSS control and predictability, especially in modular and component-based web development.",
      "example": ".reset-box {\n  color: blue;\n  border: 1px solid black;\n  padding: 1rem;\n}\n\n.initial-reset {\n  all: initial; /* Resets all properties to initial values */\n}\n\n.unset-reset {\n  all: unset;   /* Resets inherited to inherit, others to initial */\n}",
      "previewHtml": "<div class='reset-box'>\n  <div class='reset-box initial-reset'>Initial Reset</div>\n  <div class='reset-box unset-reset'>Unset Reset</div>\n</div>",
      "practice": [
        "Experiment with 'initial' and 'unset' on different CSS properties to observe their effects",
        "Use 'all: unset' to create a CSS reset for a specific component",
        "Understand the difference between 'initial' and 'unset' for inherited and non-inherited properties"
      ],
      "quiz": [
        {
          "question": "What does the CSS keyword 'initial' do?",
          "options": ["Resets property to inherited value", "Resets property to browser default style", "Resets property to the value defined in parent", "Resets property to its specification-defined initial value"],
          "correctAnswer": 3
        },
        {
          "question": "What does the CSS keyword 'unset' do for an inherited property?",
          "options": ["Resets to 'initial' value", "Resets to 'inherit' value", "Removes the property", "Sets it to 'auto'"],
          "correctAnswer": 1
        },
        {
          "question": "What does 'all: unset;' reset?",
          "options": ["Only inherited properties", "Only non-inherited properties", "All CSS properties except 'display'", "All CSS properties, including custom properties"],
          "correctAnswer": 3
        },
        {
          "question": "For a non-inherited property, how does 'unset' behave?",
          "options": ["Same as 'inherit'", "Same as 'initial'", "Same as 'revert'", "No effect"],
          "correctAnswer": 1
        },
        {
          "question": "Which CSS property is used to reset or unset all CSS properties of an element?",
          "options": ["reset", "clear", "all", "initial-all"],
          "correctAnswer": 2
        }
      ],
      "interactiveExamples": [
        {
          "code": ".interactive-reset-element {\n  color: green;\n  font-size: 1.2em;\n  /* Try toggling 'all: initial;' or 'all: unset;' */\n  all: unset;\n}",
          "result": "Element with CSS reset using 'all: unset' (or 'initial')"
        },
        {
          "code": ".inherited-property-example {\n  font-family: Arial, sans-serif;\n  color: blue;\n}\n\n.unset-color {\n  color: unset; /* Inherits color from parent */\n}\n\n.initial-color {\n  color: initial; /* Resets to initial color value (black) */\n}",
          "result": "Demonstrating 'unset' and 'initial' on an inherited property (color)"
        },
        {
          "code": ".non-inherited-property-example {\n  border: 2px solid red;\n  padding: 1rem;\n}\n\n.unset-border {\n  border: unset; /* Resets to initial border value (none) */\n}\n\n.initial-border {\n  border: initial; /* Also resets to initial border value (none) */\n}",
          "result": "Demonstrating 'unset' and 'initial' on a non-inherited property (border)"
        }
      ],
      "keyPoints": [
        "Keywords: `initial`, `unset`, Property: `all`.",
        "`initial` resets a property to its specification-defined initial value.",
        "`unset` resets inherited properties to their inherited value, and non-inherited to 'initial'.",
        "`all: initial` resets all CSS properties to their initial values.",
        "`all: unset` resets all CSS properties contextually (inherit or initial).",
        "Useful for CSS resets, component isolation, and managing CSS cascade and inheritance.",
        "Enhance CSS predictability and control, especially in complex stylesheets and component-based architectures."
      ]
    },
    {
      "id": "css-clip-path",
      "technology": "css",
      "category": "effects",
      "title": "CSS Clip Path",
      "description": "Define complex shapes to clip and reveal parts of elements using CSS clip-path",
      "difficulty": "intermediate",
      "explanation": "CSS `clip-path` is a powerful property that allows you to define complex clipping regions to control which parts of an element are visible, effectively making elements non-rectangular. It enables you to create diverse visual effects, image masks, and custom layouts by clipping elements into circles, polygons, stars, or even more intricate shapes.  The `clip-path` property defines a clipping region, which determines the visible portion of an element. Parts of the element that fall *outside* the clipping region are hidden, while parts *inside* remain visible. Clipping regions can be defined using:  * **Basic Shapes**: CSS provides several shape functions to define common shapes:  * `circle(radius [at center-position])`: Creates a circular clipping region. * `ellipse(radius-x radius-y [at center-position])`: Creates an elliptical clipping region. * `polygon([(<number> <number>)...])`: Creates a polygonal clipping region defined by a series of x/y coordinate pairs. * `inset(top [right] [bottom] [left] [round <border-radius>])`: Creates a rectangular clipping region that is inset from the element's edges. * **SVG Paths**: You can use SVG path syntax to define highly complex and custom shapes for clipping regions. This is done using `clip-path: path('svg-path-string');` or by referencing an `<clipPath>` element defined in SVG using `clip-path: url(#clipPathId);`.  Units for shape functions can be pixels, percentages, ems, rems, or viewport units. For percentages, they are relative to the element's reference box.  The `clip-path` property is versatile and can be used for:  * **Image Masking**: Clipping images into circular, elliptical, or custom shapes for creative image presentation. * **Non-rectangular Layouts**: Creating layouts with elements that are not strictly rectangular, breaking away from traditional box-based designs. * **Visual Effects**: Revealing parts of elements on hover or animation, creating interesting transitions and visual dynamics. * **UI Element Shaping**: Designing non-rectangular buttons, cards, or other interactive UI components. * **Content Highlighting**: Emphasizing specific areas of an element by clipping away the less important parts.  `clip-path` offers a powerful and declarative way to control element visibility and shape in CSS, enabling a wide range of creative and functional design possibilities without relying on image editing or canvas manipulation for basic shape clipping.",
          "example": ".clip-path-circle {\n  clip-path: circle(50%); /* Clips element into a circle */\n  width: 150px;\n  height: 150px;\n  background-color: #9b59b6;\n}\n\n.clip-path-polygon {\n  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%); /* Diamond shape */\n  width: 200px;\n  height: 200px;\n  background-color: #f1c40f;\n}",
          "previewHtml": "<div class='clip-path-circle'>Circle Clip</div>\n<div class='clip-path-polygon'>Polygon Clip</div>",
          "practice": [
            "Clip images into circular or elliptical shapes",
            "Create polygonal shaped buttons or elements",
            "Use SVG paths for highly complex clip shapes",
            "Animate clip paths for reveal effects"
          ],
          "quiz": [
            {
              "question": "Which CSS property is used to define a clipping region?",
              "options": ["clip-region", "mask-clip", "clip-path", "region-clip"],
              "correctAnswer": 2
            },
            {
              "question": "Which CSS function is used to create a rectangular clip path?",
              "options": ["rect()", "rectangle()", "box()", "inset()"],
              "correctAnswer": 3
            },
            {
              "question": "Can you use SVG paths for 'clip-path'?",
              "options": ["No", "Yes, using url() function", "Only for images", "Only in SVG elements"],
              "correctAnswer": 1
            },
            {
              "question": "What is the default reference box for percentage values in 'clip-path' shape functions?",
              "options": ["Viewport", "Initial containing block", "Element's own border-box", "Parent element's content-box"],
              "correctAnswer": 2
            },
            {
              "question": "Which shape function would you use to create a star-like clipping path?",
              "options": ["circle()", "ellipse()", "polygon()", "inset()"],
              "correctAnswer": 2
            }
          ],
          "interactiveExamples": [
            {
              "code": ".interactive-clip {\n  width: 120px;\n  height: 120px;\n  background-image: url('image.jpg'); /* Replace with image URL */\n  clip-path: ellipse(60% 50% at 50% 50%); /* Elliptical clip */\n  /* Try changing shape function and parameters */\n}",
              "result": "Image clipped into an elliptical shape"
            },
            {
              "code": ".polygon-button {\n  clip-path: polygon(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%);\n  background-color: #2ecc71;\n  color: white;\n  padding: 1rem 2rem;\n  border: none;\n  cursor: pointer;\n}",
              "result": "Button with a polygonal (octagon) clip path"
            },
            {
              "code": ".animated-clip-path {\n  width: 150px;\n  height: 150px;\n  background-color: #e74c3c;\n  clip-path: circle(0% at 50% 50%); /* Initially clipped to nothing */\n  transition: clip-path 1s ease-out;\n}\n\n.animated-clip-path:hover {\n  clip-path: circle(75% at 50% 50%); /* Reveal on hover */\n}",
              "result": "Animated clip path revealing an element on hover"
            }
          ],
          "keyPoints": [
            "Define clipping regions to show specific parts of elements, making them non-rectangular.",
            "Property: `clip-path`.",
            "Shape functions: `circle()`, `ellipse()`, `polygon()`, `inset()`, `path()` (for SVG paths).",
            "Create image masks, unique visual effects, and custom layouts.",
            "Can be animated for reveal transitions and dynamic effects.",
            "`clip-path` enhances visual design and allows for creative element shaping beyond rectangles.",
            "Use SVG paths for highly complex and custom clipping shapes."
          ]
        }
  ]
}




